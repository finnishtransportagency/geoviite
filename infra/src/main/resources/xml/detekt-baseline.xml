<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:CoordinateTransformationService.kt$Transformation$etrsToKkjTriangulationNetwork != null &amp;&amp; !etrsToKkjTriangulationNetwork.isEmpty &amp;&amp; sourceSrid == LAYOUT_SRID &amp;&amp; isKKJ(targetSrid)</ID>
    <ID>ComplexCondition:CoordinateTransformationService.kt$Transformation$kkjToEtrsTriangulationNetwork != null &amp;&amp; !kkjToEtrsTriangulationNetwork.isEmpty &amp;&amp; isKKJ(sourceSrid) &amp;&amp; targetSrid == LAYOUT_SRID</ID>
    <ID>CyclomaticComplexMethod:CsvTranslations.kt$fun translateElementListingHeader(header: ElementListingHeader)</ID>
    <ID>CyclomaticComplexMethod:CsvTranslations.kt$fun translateVerticalGeometryListingHeader(header: VerticalGeometryListingHeader)</ID>
    <ID>CyclomaticComplexMethod:ErrorHandling.kt$fun describe(exception: Exception): String?</ID>
    <ID>CyclomaticComplexMethod:ErrorHandling.kt$fun getStatusCode(exception: Exception): HttpStatus?</ID>
    <ID>CyclomaticComplexMethod:GeometryService.kt$GeometryService$private fun collectTrackMeterHeights( startDistance: Double, endDistance: Double, geocodingContext: GeocodingContext, alignment: IAlignment, tickLength: Int, alignmentBoundaryAddresses: List&lt;PlanBoundaryPoint&gt; = listOf(), getHeightAt: (point: LayoutPoint, segmentIndex: Int?) -&gt; Double?, ): List&lt;KmHeights&gt;?</ID>
    <ID>CyclomaticComplexMethod:InfraModelService.kt$InfraModelService$private fun overrideGeometryPlanWithParameters( plan: GeometryPlan, overrideParameters: OverrideParameters? = null, extraInfoParameters: ExtraInfoParameters? = null, ): GeometryPlan</ID>
    <ID>CyclomaticComplexMethod:PublicationService.kt$PublicationService$fun diffLocationTrack( translation: Translation, locationTrackChanges: LocationTrackChanges, switchLinkChanges: LocationTrackPublicationSwitchLinkChanges?, publicationTime: Instant, previousPublicationTime: Instant, trackNumberCache: List&lt;TrackNumberAndChangeTime&gt;, addressesChanged: Boolean, changedKmNumbers: Set&lt;KmNumber&gt;, getGeocodingContext: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, ): List&lt;PublicationChange&lt;*&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:RatkoConversion.kt$fun mapJointNumberToGeometryType( number: JointNumber, baseType: SwitchBaseType, ): RatkoAssetGeometryType</ID>
    <ID>CyclomaticComplexMethod:SwitchLinkingService.kt$private fun getSegmentsByLinkingJoints( linkingJoints: List&lt;SwitchLinkingJoint&gt;, segment: LayoutSegment, layoutSwitchId: IntId&lt;TrackLayoutSwitch&gt;, isFirstSegment: Boolean, isLastSegment: Boolean, )</ID>
    <ID>EmptyDefaultConstructor:VerticalGeometryListingTest.kt$VerticalGeometryListingTest$()</ID>
    <ID>EmptyFunctionBlock:NoTransactionTemplate.kt$NoTransactionTemplate${ }</ID>
    <ID>EnumNaming:PVApi.kt$PVApiSearchState$kaynnissa</ID>
    <ID>EnumNaming:PVApi.kt$PVApiSearchState$kaynnistetty</ID>
    <ID>EnumNaming:PVApi.kt$PVApiSearchState$valmis</ID>
    <ID>EnumNaming:PVApi.kt$PVApiSearchState$virhe</ID>
    <ID>ForEachOnRange:GeometryProfile.kt$1..elements.lastIndex</ID>
    <ID>ForbiddenComment:BasicMapTestUI.kt$BasicMapTestUI$// TODO: GVT-1945 Don't use shared test data - init the data in the test as is needed, so it's clear what is expected</ID>
    <ID>ForbiddenComment:FormLayout.kt$E2EFormLayout$// TODO: GVT-1947 use qa-ids to find fields</ID>
    <ID>ForbiddenComment:GeometryDao.kt$GeometryDao$// TODO: GVT-1794 This appears unused -&gt; just return rowversion/id</ID>
    <ID>ForbiddenComment:InfoBox.kt$E2EInfoBox$// TODO: GVT-2034 These label-content fields could be a component of their own</ID>
    <ID>ForbiddenComment:InfraModelTestUI.kt$InfraModelTestUI$//FIXME: disabled until we can se timezone to Helsinki/Finland in AWS</ID>
    <ID>ForbiddenComment:LayoutAlignmentDao.kt$LayoutAlignmentDao$// TODO: GVT-1691 batching this is a little tricky due to difficulty in mapping generated ids:</ID>
    <ID>ForbiddenComment:PublicationService.kt$PublicationService$// TODO: This does not respect the candidate versions</ID>
    <ID>ForbiddenComment:PublicationService.kt$PublicationService$// TODO: This does not respect the validation versions</ID>
    <ID>ForbiddenComment:ReferenceLineDao.kt$ReferenceLineDao$// TODO: No IT test runs this</ID>
    <ID>ForbiddenComment:SwitchLinkingService.kt$// TODO: There could be tolerance per joint point in switch structure</ID>
    <ID>ForbiddenComment:SwitchLinkingService.kt$SwitchLinkingService$// TODO: There is a missing switch here, but current logic doesn't support non-typed suggestions</ID>
    <ID>ForbiddenComment:ToolPanelInfobox.kt$E2EGeometryPlanGeneralInfoBox$// TODO: GVT-1939 Replace init-sleeps with reliable waits</ID>
    <ID>FunctionNaming:KRV43_233_1_9.kt$fun KRV43_233_1_9()</ID>
    <ID>FunctionNaming:KRV43_270_1_9_514.kt$fun KRV43_270_1_9_514()</ID>
    <ID>FunctionNaming:KRV54_200_1_9.kt$fun KRV54_200_1_9()</ID>
    <ID>FunctionNaming:KV30_270_1_9_514.kt$fun KV30_270_1_9_514_O()</ID>
    <ID>FunctionNaming:KV30_270_1_9_514.kt$fun KV30_270_1_9_514_V()</ID>
    <ID>FunctionNaming:KV43_300_1_9_514.kt$fun KV43_300_1_9_514_O()</ID>
    <ID>FunctionNaming:KV43_300_1_9_514.kt$fun KV43_300_1_9_514_V()</ID>
    <ID>FunctionNaming:KV54_200_1_9.kt$fun KV54_200N_1_9_O()</ID>
    <ID>FunctionNaming:KV54_200_1_9.kt$fun KV54_200N_1_9_V()</ID>
    <ID>FunctionNaming:KV54_200_1_9.kt$fun KV54_200_1_9_O()</ID>
    <ID>FunctionNaming:KV54_200_1_9.kt$fun KV54_200_1_9_V()</ID>
    <ID>FunctionNaming:RR54_1_9.kt$fun RR54_1_9()</ID>
    <ID>FunctionNaming:RR54_2x1_9.kt$fun RR54_2x1_9()</ID>
    <ID>FunctionNaming:SKV60_1000_474_1_15_5.kt$fun SKV60_1000_474_1_15_5_O()</ID>
    <ID>FunctionNaming:SKV60_1000_474_1_15_5.kt$fun SKV60_1000_474_1_15_5_V()</ID>
    <ID>FunctionNaming:SKV60_800_423_1_15_5.kt$fun SKV60_800_423_1_15_5_O()</ID>
    <ID>FunctionNaming:SKV60_800_423_1_15_5.kt$fun SKV60_800_423_1_15_5_V()</ID>
    <ID>FunctionNaming:SRR54_2x1_9_4_8.kt$fun SRR54_2x1_9_4_8()</ID>
    <ID>FunctionNaming:SRR54_2x1_9_6_0.kt$fun SRR54_2x1_9_6_0()</ID>
    <ID>FunctionNaming:SRR60_2x1_9_4_8.kt$fun SRR60_2x1_9_4_8()</ID>
    <ID>FunctionNaming:TYV54_200_1_4_44.kt$fun TYV54_200_1_4_44()</ID>
    <ID>FunctionNaming:TYV54_200_1_4_44TPE.kt$fun TYV54_200_1_4_44TPE()</ID>
    <ID>FunctionNaming:TYV54_225_1_6_46.kt$fun TYV54_225_1_6_46()</ID>
    <ID>FunctionNaming:TYV54_225_1_6_46TPE.kt$fun TYV54_225_1_6_46TPE()</ID>
    <ID>FunctionNaming:UKV54_1000_244_1_9.kt$fun UKV54_1000_244_1_9_O()</ID>
    <ID>FunctionNaming:UKV54_1000_244_1_9.kt$fun UKV54_1000_244_1_9_V()</ID>
    <ID>FunctionNaming:UKV54_1500_228_1_9.kt$fun UKV54_1500_228_1_9_O()</ID>
    <ID>FunctionNaming:UKV54_1500_228_1_9.kt$fun UKV54_1500_228_1_9_V()</ID>
    <ID>FunctionNaming:UKV54_800_258_1_9.kt$fun UKV54_800_258_1_9_O()</ID>
    <ID>FunctionNaming:UKV54_800_258_1_9.kt$fun UKV54_800_258_1_9_V()</ID>
    <ID>FunctionNaming:UKV60_1000_244_1_9.kt$fun UKV60_1000_244_1_9_O()</ID>
    <ID>FunctionNaming:UKV60_1000_244_1_9.kt$fun UKV60_1000_244_1_9_V()</ID>
    <ID>FunctionNaming:UKV60_600_281_1_9.kt$fun UKV60_600_281_1_9_O()</ID>
    <ID>FunctionNaming:UKV60_600_281_1_9.kt$fun UKV60_600_281_1_9_V()</ID>
    <ID>FunctionNaming:YRV54_200_1_9.kt$fun YRV54_200_1_9()</ID>
    <ID>FunctionNaming:YV30_270_1_7.kt$fun YV30_270_1_7_O()</ID>
    <ID>FunctionNaming:YV30_270_1_7.kt$fun YV30_270_1_7_V()</ID>
    <ID>FunctionNaming:YV30_270_1_9_514.kt$fun YV30_270_1_9_514_O()</ID>
    <ID>FunctionNaming:YV30_270_1_9_514.kt$fun YV30_270_1_9_514_V()</ID>
    <ID>FunctionNaming:YV43_205_1_9.kt$fun YV43_205_1_9_O()</ID>
    <ID>FunctionNaming:YV43_205_1_9.kt$fun YV43_205_1_9_V()</ID>
    <ID>FunctionNaming:YV43_205_1_9_514.kt$fun YV43_205_1_9_514_O()</ID>
    <ID>FunctionNaming:YV43_205_1_9_514.kt$fun YV43_205_1_9_514_V()</ID>
    <ID>FunctionNaming:YV43_300_1_7.kt$fun YV43_300_1_7_O()</ID>
    <ID>FunctionNaming:YV43_300_1_7.kt$fun YV43_300_1_7_V()</ID>
    <ID>FunctionNaming:YV43_300_1_9.kt$fun YV43_300_1_9_O()</ID>
    <ID>FunctionNaming:YV43_300_1_9.kt$fun YV43_300_1_9_V()</ID>
    <ID>FunctionNaming:YV43_300_1_9_514.kt$fun YV43_300_1_9_514_1435_O()</ID>
    <ID>FunctionNaming:YV43_300_1_9_514.kt$fun YV43_300_1_9_514_1435_V()</ID>
    <ID>FunctionNaming:YV43_300_1_9_514.kt$fun YV43_300_1_9_514_O()</ID>
    <ID>FunctionNaming:YV43_300_1_9_514.kt$fun YV43_300_1_9_514_V()</ID>
    <ID>FunctionNaming:YV43_530_1_15.kt$fun YV43_530_1_15_O()</ID>
    <ID>FunctionNaming:YV43_530_1_15.kt$fun YV43_530_1_15_V()</ID>
    <ID>FunctionNaming:YV54_165_1_7.kt$fun YV54_165_1_7_O()</ID>
    <ID>FunctionNaming:YV54_165_1_7.kt$fun YV54_165_1_7_V()</ID>
    <ID>FunctionNaming:YV54_190_1_7.kt$fun YV54_190_1_7_O()</ID>
    <ID>FunctionNaming:YV54_190_1_7.kt$fun YV54_190_1_7_V()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200N_1_9_1435_O()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200N_1_9_1435_V()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200N_1_9_O()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200N_1_9_V()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_1435_O()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_1435_V()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_1524_1435_O()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_1524_1435_V()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_O()</ID>
    <ID>FunctionNaming:YV54_200_1_9.kt$fun YV54_200_1_9_V()</ID>
    <ID>FunctionNaming:YV54_900_1_15_5.kt$fun YV54_900_1_15_5_O()</ID>
    <ID>FunctionNaming:YV54_900_1_15_5.kt$fun YV54_900_1_15_5_V()</ID>
    <ID>FunctionNaming:YV60_300P_1_9.kt$fun YV60_300P_1_9_O()</ID>
    <ID>FunctionNaming:YV60_300P_1_9.kt$fun YV60_300P_1_9_V()</ID>
    <ID>FunctionNaming:YV60_300_1_10.kt$fun YV60_300_1_10_O()</ID>
    <ID>FunctionNaming:YV60_300_1_10.kt$fun YV60_300_1_10_V()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300A_1_9_O()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300A_1_9_V()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300E_1_9_O()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300E_1_9_V()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300_1_9_O()</ID>
    <ID>FunctionNaming:YV60_300_1_9.kt$fun YV60_300_1_9_V()</ID>
    <ID>FunctionNaming:YV60_5000_2500_1_26.kt$fun YV60_5000_2500_1_26_O()</ID>
    <ID>FunctionNaming:YV60_5000_2500_1_26.kt$fun YV60_5000_2500_1_26_V()</ID>
    <ID>FunctionNaming:YV60_5000_3000_1_28.kt$fun YV60_5000_3000_1_28_O()</ID>
    <ID>FunctionNaming:YV60_5000_3000_1_28.kt$fun YV60_5000_3000_1_28_V()</ID>
    <ID>FunctionNaming:YV60_500_1_11_1.kt$fun YV60_500A_1_11_1_O()</ID>
    <ID>FunctionNaming:YV60_500_1_11_1.kt$fun YV60_500A_1_11_1_V()</ID>
    <ID>FunctionNaming:YV60_500_1_11_1.kt$fun YV60_500_1_11_1_O()</ID>
    <ID>FunctionNaming:YV60_500_1_11_1.kt$fun YV60_500_1_11_1_V()</ID>
    <ID>FunctionNaming:YV60_500_1_14.kt$fun YV60_500A_1_14_O()</ID>
    <ID>FunctionNaming:YV60_500_1_14.kt$fun YV60_500A_1_14_V()</ID>
    <ID>FunctionNaming:YV60_500_1_14.kt$fun YV60_500_1_14_O()</ID>
    <ID>FunctionNaming:YV60_500_1_14.kt$fun YV60_500_1_14_V()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900A_1_15_5_O()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900A_1_15_5_V()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900E_1_15_5_O()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900E_1_15_5_V()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900_1_15_5_O()</ID>
    <ID>FunctionNaming:YV60_900_1_15_5.kt$fun YV60_900_1_15_5_V()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900A_1_18_O()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900A_1_18_V()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900P_1_18_O()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900P_1_18_V()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900_1_18_O()</ID>
    <ID>FunctionNaming:YV60_900_1_18.kt$fun YV60_900_1_18_V()</ID>
    <ID>FunctionParameterNaming:BiquadraticParabola.kt$D: Double</ID>
    <ID>FunctionParameterNaming:BiquadraticParabola.kt$L: Double</ID>
    <ID>FunctionParameterNaming:BiquadraticParabola.kt$R: Double</ID>
    <ID>FunctionParameterNaming:BiquadraticParabolaTest.kt$BiquadraticParabolaTest$L: Double</ID>
    <ID>FunctionParameterNaming:BiquadraticParabolaTest.kt$BiquadraticParabolaTest$R: Double</ID>
    <ID>ImplicitDefaultLocale:CommonUiTestUtil.kt$CommonUiTestUtil.Companion$String.format("%.3f", v)</ID>
    <ID>ImplicitDefaultLocale:TransformationTest.kt$String.format("%.2f", actualHeight)</ID>
    <ID>InstanceOfCheckForException:InfraModelApi.kt$e is HasLocalizeMessageKey</ID>
    <ID>InvalidPackageDeclaration:ErrorTestController.kt$package fi.fta.geoviite.infra.hello</ID>
    <ID>InvalidRange:GeocodingTest.kt$GeocodingTest$2..0</ID>
    <ID>InvalidRange:GeocodingTest.kt$GeocodingTest$2..1</ID>
    <ID>LargeClass:AddressChangesServiceIT.kt$AddressChangesServiceIT : DBTestBase</ID>
    <ID>LargeClass:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT : DBTestBase</ID>
    <ID>LargeClass:GeometryDao.kt$GeometryDao : DaoBase</ID>
    <ID>LargeClass:LayoutAlignmentDao.kt$LayoutAlignmentDao : DaoBase</ID>
    <ID>LargeClass:PublicationDao.kt$PublicationDao : DaoBase</ID>
    <ID>LargeClass:PublicationService.kt$PublicationService</ID>
    <ID>LargeClass:PublicationServiceIT.kt$PublicationServiceIT : DBTestBase</ID>
    <ID>LargeClass:PublicationValidationTest.kt$PublicationValidationTest</ID>
    <ID>LargeClass:RatkoServiceIT.kt$RatkoServiceIT : DBTestBase</ID>
    <ID>LargeClass:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT : DBTestBase</ID>
    <ID>LargeClass:SwitchLinkingTest.kt$SwitchLinkingTest</ID>
    <ID>LongMethod:AddressChangesServiceIT.kt$AddressChangesServiceIT$fun createAndInsertTrackNumberAndLocationTrack(): SetupData</ID>
    <ID>LongMethod:CalculatedChangesService.kt$CalculatedChangesService$private fun getSwitchChangesByLocationTrack( trackId: IntId&lt;LocationTrack&gt;, changeContext: ChangeContext, ): List&lt;SwitchChange&gt;</ID>
    <ID>LongMethod:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$@Test fun addingTopologyEndSwitchGeneratesIndirectlySwitchChanges()</ID>
    <ID>LongMethod:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$@Test fun addingTopologyStartSwitchGeneratesIndirectlySwitchChanges()</ID>
    <ID>LongMethod:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$@Test fun referenceLineChangeGeneratesIndirectlyLocationTrackChangesThatGenerateIndirectlySwitchChanges()</ID>
    <ID>LongMethod:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$@Test fun removingTopologyEndSwitchGeneratesIndirectlySwitchChanges()</ID>
    <ID>LongMethod:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$fun insertTestData( kmPostData: List&lt;Pair&lt;KmNumber, IPoint&gt;&gt; = listOf(), locationTrackData: List&lt;Line&gt; = listOf(), switchData: List&lt;SwitchData&gt; = listOf() ): TestData</ID>
    <ID>LongMethod:FrozenMigrationsTest.kt$FrozenMigrationsTest$@Test fun initMigrationsHaveNotChanged()</ID>
    <ID>LongMethod:GeocodingDaoIT.kt$GeocodingDaoIT$@Test fun cacheKeysAreCalculatedCorrectly()</ID>
    <ID>LongMethod:GeometryDao.kt$GeometryDao$@Cacheable(CACHE_GEOMETRY_PLAN, sync = true) fun fetchPlan(planVersion: RowVersion&lt;GeometryPlan&gt;): GeometryPlan</ID>
    <ID>LongMethod:GeometryDao.kt$GeometryDao$@Transactional fun insertPlan( plan: GeometryPlan, file: InfraModelFile, boundingBoxInLayoutCoordinates: List&lt;Point&gt;?, ): RowVersion&lt;GeometryPlan&gt;</ID>
    <ID>LongMethod:GeometryDao.kt$GeometryDao$fun fetchElements( alignmentId: IntId&lt;GeometryAlignment&gt;, units: GeometryUnits, geometryElementId: IndexedId&lt;GeometryElement&gt;? = null, ): List&lt;GeometryElement&gt;</ID>
    <ID>LongMethod:GeometryDao.kt$GeometryDao$fun getLinkingSummaries(planIds: List&lt;IntId&lt;GeometryPlan&gt;&gt;? = null): Map&lt;IntId&lt;GeometryPlan&gt;, GeometryPlanLinkingSummary&gt;</ID>
    <ID>LongMethod:GeometryProfileTest.kt$GeometryProfileTest$@Test fun profileSegmentsAreGeneratedCorrectly()</ID>
    <ID>LongMethod:GeometryProfileTest.kt$GeometryProfileTest$@Test fun shouldReturnCorrectTangentPointsAndCentersOnLeaningCurves()</ID>
    <ID>LongMethod:GeometryValidation.kt$private fun validateElement(alignmentName: AlignmentName, element: GeometryElement): List&lt;ElementError&gt;</ID>
    <ID>LongMethod:InfraModelConversion.kt$fun toGvtGeometryElement( element: InfraModelGeometryElement, units: GeometryUnits, switches: Map&lt;SwitchKey, GeometrySwitch&gt;, ): GeometryElement</ID>
    <ID>LongMethod:InfraModelConversion.kt$fun toGvtPlan( source: PlanSource, fileName: FileName, infraModel: InfraModel, coordinateSystemNameToSrid: Map&lt;CoordinateSystemName, Srid&gt;, switchStructuresByType: Map&lt;SwitchType, SwitchStructure&gt;, switchTypeNameAliases: Map&lt;String, String&gt;, trackNumberIdsByNumber: Map&lt;TrackNumber, IntId&lt;TrackLayoutTrackNumber&gt;&gt;, ): GeometryPlan</ID>
    <ID>LongMethod:InfraModelParsingIT.kt$InfraModelParsingIT$@Test fun encodeAndDecodeWorks403()</ID>
    <ID>LongMethod:InfraModelParsingIT.kt$InfraModelParsingIT$@Test fun encodeAndDecodeWorks404()</ID>
    <ID>LongMethod:KRV43_233_1_9.kt$fun KRV43_233_1_9()</ID>
    <ID>LongMethod:KRV43_270_1_9_514.kt$fun KRV43_270_1_9_514()</ID>
    <ID>LongMethod:KRV54_200_1_9.kt$fun KRV54_200_1_9()</ID>
    <ID>LongMethod:KV30_270_1_9_514.kt$fun KV30_270_1_9_514_O()</ID>
    <ID>LongMethod:KV43_300_1_9_514.kt$fun KV43_300_1_9_514_V()</ID>
    <ID>LongMethod:KV54_200_1_9.kt$fun KV54_200_1_9_O()</ID>
    <ID>LongMethod:LayoutAlignmentDao.kt$LayoutAlignmentDao$fun fetchSegmentGeometriesAndPlanMetadata( alignmentVersion: RowVersion&lt;LayoutAlignment&gt;, metadataExternalId: Oid&lt;*&gt;?, boundingBox: BoundingBox?, ): List&lt;SegmentGeometryAndMetadata&gt;</ID>
    <ID>LongMethod:LayoutAlignmentDaoIT.kt$LayoutAlignmentDaoIT$@Test fun `alignment hasProfile fetch works`()</ID>
    <ID>LongMethod:LayoutSwitchDao.kt$LayoutSwitchDao$fun fetchSegmentSwitchJointConnections( publicationState: PublishType, switchId: IntId&lt;TrackLayoutSwitch&gt;, ): List&lt;TrackLayoutSwitchJointConnection&gt;</ID>
    <ID>LongMethod:LayoutSwitchServiceIT.kt$LayoutSwitchServiceIT$@Test fun shouldReturnLocationTracksThatAreLinkedToSwitchAtMoment()</ID>
    <ID>LongMethod:LinkingDao.kt$LinkingDao$fun getMissingLayoutSwitchLinkings( bbox: BoundingBox, geometrySwitchId: IntId&lt;GeometrySwitch&gt;? = null, ): List&lt;MissingLayoutSwitchLinking&gt;</ID>
    <ID>LongMethod:LinkingServiceIT.kt$LinkingServiceIT$@Test fun alignmentGeometryLinkingWorks()</ID>
    <ID>LongMethod:LinkingTest.kt$LinkingTest$@Test fun `Portion of layout alignment can be linked from geometry`()</ID>
    <ID>LongMethod:LocationTrackDao.kt$LocationTrackDao$@Transactional override fun insert(newItem: LocationTrack): DaoResponse&lt;LocationTrack&gt;</ID>
    <ID>LongMethod:PVDao.kt$PVDao$@Transactional fun insertDocumentMetadata( oid: Oid&lt;PVDocument&gt;, metadata: PVApiDocumentMetadata, latestVersion: PVApiLatestVersion, status: PVDocumentStatus, assignmentOid: Oid&lt;PVAssignment&gt;?, projectOid: Oid&lt;PVProject&gt;?, projectGroupOid: Oid&lt;PVProjectGroup&gt;?, ): RowVersion&lt;PVDocument&gt;</ID>
    <ID>LongMethod:PVDao.kt$PVDao$fun getDocumentHeaders(status: PVDocumentStatus? = null, id: IntId&lt;PVDocument&gt;? = null): List&lt;PVDocumentHeader&gt;</ID>
    <ID>LongMethod:PVSearchJson.kt$fun searchJson(cutoffDate: Instant, minOid: Oid&lt;PVDocument&gt;?, maxResultCount: Int)</ID>
    <ID>LongMethod:PublicationDao.kt$PublicationDao$fun fetchPublicationLocationTrackChanges(publicationId: IntId&lt;Publication&gt;): Map&lt;IntId&lt;LocationTrack&gt;, LocationTrackChanges&gt;</ID>
    <ID>LongMethod:PublicationDao.kt$PublicationDao$fun fetchPublicationLocationTrackSwitchLinkChanges( publicationId: IntId&lt;Publication&gt;?, from: Instant?, to: Instant?, ): Map&lt;IntId&lt;Publication&gt;, Map&lt;IntId&lt;LocationTrack&gt;, LocationTrackPublicationSwitchLinkChanges&gt;&gt;</ID>
    <ID>LongMethod:PublicationDao.kt$PublicationDao$fun fetchPublicationReferenceLineChanges(publicationId: IntId&lt;Publication&gt;): Map&lt;IntId&lt;ReferenceLine&gt;, ReferenceLineChanges&gt;</ID>
    <ID>LongMethod:PublicationDao.kt$PublicationDao$fun fetchPublicationSwitchChanges(publicationId: IntId&lt;Publication&gt;): Map&lt;IntId&lt;TrackLayoutSwitch&gt;, SwitchChanges&gt;</ID>
    <ID>LongMethod:PublicationDao.kt$PublicationDao$private fun saveSwitchChanges( publicationId: IntId&lt;Publication&gt;, directChanges: Collection&lt;SwitchChange&gt;, indirectChanges: Collection&lt;SwitchChange&gt;, )</ID>
    <ID>LongMethod:PublicationService.kt$PublicationService$fun diffLocationTrack( translation: Translation, locationTrackChanges: LocationTrackChanges, switchLinkChanges: LocationTrackPublicationSwitchLinkChanges?, publicationTime: Instant, previousPublicationTime: Instant, trackNumberCache: List&lt;TrackNumberAndChangeTime&gt;, addressesChanged: Boolean, changedKmNumbers: Set&lt;KmNumber&gt;, getGeocodingContext: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, ): List&lt;PublicationChange&lt;*&gt;&gt;</ID>
    <ID>LongMethod:PublicationService.kt$PublicationService$fun diffSwitch( translation: Translation, changes: SwitchChanges, newTimestamp: Instant, oldTimestamp: Instant, operation: Operation, trackNumberCache: List&lt;TrackNumberAndChangeTime&gt;, geocodingContextGetter: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, ): List&lt;PublicationChange&lt;*&gt;&gt;</ID>
    <ID>LongMethod:PublicationService.kt$PublicationService$private fun mapToPublicationTableItems( translation: Translation, publication: PublicationDetails, switchLinkChanges: Map&lt;IntId&lt;LocationTrack&gt;, LocationTrackPublicationSwitchLinkChanges&gt;, previousComparisonTime: Instant, geocodingContextGetter: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, trackNumberNamesCache: List&lt;TrackNumberAndChangeTime&gt; = trackNumberDao.fetchTrackNumberNames(), ): List&lt;PublicationTableItem&gt;</ID>
    <ID>LongMethod:PublicationServiceIT.kt$PublicationServiceIT$@Test fun `Location track diff finds all changed fields`()</ID>
    <ID>LongMethod:PublicationServiceIT.kt$PublicationServiceIT$@Test fun `Location track switch link changes are reported`()</ID>
    <ID>LongMethod:PublicationServiceIT.kt$PublicationServiceIT$@Test fun `Publication validation identifies duplicate names`()</ID>
    <ID>LongMethod:RR54_1_9.kt$fun RR54_1_9()</ID>
    <ID>LongMethod:RR54_2x1_9.kt$fun RR54_2x1_9()</ID>
    <ID>LongMethod:RatkoLocationTrackService.kt$RatkoLocationTrackService$private fun createLocationTrackMetadata( layoutLocationTrack: LocationTrack, alignmentPoints: List&lt;AddressPoint&gt;, trackNumberOid: Oid&lt;TrackLayoutTrackNumber&gt;, moment: Instant, changedKmNumbers: Set&lt;KmNumber&gt;? = null, )</ID>
    <ID>LongMethod:RatkoService.kt$RatkoService$private fun pushChanges(publications: List&lt;PublicationDetails&gt;)</ID>
    <ID>LongMethod:SRR54_2x1_9_4_8.kt$fun SRR54_2x1_9_4_8()</ID>
    <ID>LongMethod:SRR54_2x1_9_6_0.kt$fun SRR54_2x1_9_6_0()</ID>
    <ID>LongMethod:SRR60_2x1_9_4_8.kt$fun SRR60_2x1_9_4_8()</ID>
    <ID>LongMethod:SwitchLinkingService.kt$fun findSuggestedSwitchJointMatches( joint: SwitchJoint, locationTrack: LocationTrack, alignment: LayoutAlignment, tolerance: Double, ): List&lt;SuggestedSwitchJointMatch&gt;</ID>
    <ID>LongMethod:SwitchLinkingService.kt$private fun getSegmentsByLinkingJoints( linkingJoints: List&lt;SwitchLinkingJoint&gt;, segment: LayoutSegment, layoutSwitchId: IntId&lt;TrackLayoutSwitch&gt;, isFirstSegment: Boolean, isLastSegment: Boolean, )</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `Switch linking slight overlap correction should not remove previous switch linking`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `Switch linking slight overlap correction should override the original switch when the overlap correction limit is exceeded`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `Switch linking slight overlap correction should work regardless of the joint number order`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `Switch linking slight overlap correction should work with multiple overlapping segments`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `should filter out switch matches that do not match with switch structure alignment`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$@Test fun `should match with first switch alignment match only`()</ID>
    <ID>LongMethod:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$private fun createLocationTracksWithLinkedSwitch( seed: Int = 12345, ): LocationTracksWithLinkedSwitch</ID>
    <ID>LongMethod:SwitchLinkingTest.kt$SwitchLinkingTest$@Test fun `should find joint matches for suggested switch`()</ID>
    <ID>LongMethod:SwitchLinkingTest.kt$SwitchLinkingTest$@Test fun `should match with alignment regardless of direction`()</ID>
    <ID>LongMethod:SwitchLinkingTest.kt$SwitchLinkingTest$@Test fun adjacentSegmentsShouldHaveSameJointNumber()</ID>
    <ID>LongMethod:SwitchLinkingTest.kt$SwitchLinkingTest$@Test fun shouldSortLinkingJointsInSegmentOrder()</ID>
    <ID>LongMethod:UKV54_1500_228_1_9.kt$fun UKV54_1500_228_1_9_O()</ID>
    <ID>LongMethod:YRV54_200_1_9.kt$fun YRV54_200_1_9()</ID>
    <ID>LongMethod:YV60_5000_2500_1_26.kt$fun YV60_5000_2500_1_26_O()</ID>
    <ID>LongMethod:YV60_900_1_15_5.kt$fun YV60_900_1_15_5_O()</ID>
    <ID>LongParameterList:AddressChangesServiceIT.kt$AddressChangesServiceIT$( val geocodingService: GeocodingService, val geocodingDao: GeocodingDao, val locationTrackDao: LocationTrackDao, val locationTrackService: LocationTrackService, val referenceLineDao: ReferenceLineDao, val referenceLineService: ReferenceLineService, val layoutAlignmentDao: LayoutAlignmentDao, val layoutTrackNumberDao: LayoutTrackNumberDao, val layoutKmPostDao: LayoutKmPostDao, val addressChangesService: AddressChangesService, )</ID>
    <ID>LongParameterList:CachePreloader.kt$CachePreloader$( @Value("\${geoviite.cache.enabled}") private val cacheEnabled: Boolean, @Value("\${geoviite.cache.preload}") private val cachePreloadEnabled: Boolean, private val layoutTrackNumberDao: LayoutTrackNumberDao, private val layoutKmPostDao: LayoutKmPostDao, private val switchDao: LayoutSwitchDao, private val referenceLineDao: ReferenceLineDao, private val locationTrackDao: LocationTrackDao, private val alignmentDao: LayoutAlignmentDao, private val switchStructureDao: SwitchStructureDao, private val geometryDao: GeometryDao, )</ID>
    <ID>LongParameterList:CalculatedChangesService.kt$CalculatedChangesService$( val addressChangesService: AddressChangesService, val locationTrackDao: LocationTrackDao, val locationTrackService: LocationTrackService, val switchDao: LayoutSwitchDao, val switchService: LayoutSwitchService, val switchLibraryService: SwitchLibraryService, val trackNumberDao: LayoutTrackNumberDao, val trackNumberService: LayoutTrackNumberService, val referenceLineDao: ReferenceLineDao, val referenceLineService: ReferenceLineService, val kmPostDao: LayoutKmPostDao, val geocodingService: GeocodingService, val alignmentDao: LayoutAlignmentDao, )</ID>
    <ID>LongParameterList:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$( val calculatedChangesService: CalculatedChangesService, val switchDao: LayoutSwitchDao, val locationTrackDao: LocationTrackDao, val locationTrackService: LocationTrackService, val referenceLineDao: ReferenceLineDao, val referenceLineService: ReferenceLineService, val layoutAlignmentDao: LayoutAlignmentDao, val layoutTrackNumberDao: LayoutTrackNumberDao, val layoutKmPostDao: LayoutKmPostDao, val switchService: LayoutSwitchService, val switchLinkingService: SwitchLinkingService, val alignmentDao: LayoutAlignmentDao, val kmPostService: LayoutKmPostService, val trackNumberservice: LayoutTrackNumberService, )</ID>
    <ID>LongParameterList:ChangeContext.kt$ChangeContext$( private val geocodingService: GeocodingService, val trackNumbers: TypedChangeContext&lt;TrackLayoutTrackNumber&gt;, val referenceLines: TypedChangeContext&lt;ReferenceLine&gt;, val kmPosts: TypedChangeContext&lt;TrackLayoutKmPost&gt;, val locationTracks: TypedChangeContext&lt;LocationTrack&gt;, val switches: TypedChangeContext&lt;TrackLayoutSwitch&gt;, val geocodingKeysBefore: LazyMap&lt;IntId&lt;TrackLayoutTrackNumber&gt;, GeocodingContextCacheKey?&gt;, val geocodingKeysAfter: LazyMap&lt;IntId&lt;TrackLayoutTrackNumber&gt;, GeocodingContextCacheKey?&gt;, val getTrackNumberTracksBefore: (trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt;) -&gt; List&lt;RowVersion&lt;LocationTrack&gt;&gt;, )</ID>
    <ID>LongParameterList:ChangeTimeController.kt$ChangeTimeController$( private val geometryService: GeometryService, private val switchService: LayoutSwitchService, private val trackNumberService: LayoutTrackNumberService, private val kmPostService: LayoutKmPostService, private val locationTrackService: LocationTrackService, private val referenceLineService: ReferenceLineService, private val publicationService: PublicationService, private val ratkoPushDao: RatkoPushDao, private val pvDocumentService: PVDocumentService, )</ID>
    <ID>LongParameterList:CommonTestData.kt$( name: String, trackNumber: IntId&lt;TrackLayoutTrackNumber&gt;, layoutAlignmentType: LocationTrackType = LocationTrackType.MAIN, basePoint: Point, incrementPoints: List&lt;Point&gt;, description: String = "$name location track description", )</ID>
    <ID>LongParameterList:CommonTestData.kt$( switchName: String, switchStructure: SwitchStructure, switchAngle: Double, switchOrig: Point, geometrySwitch: GeometrySwitch, trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt;, )</ID>
    <ID>LongParameterList:DraftIT.kt$DraftIT$( private val switchDao: LayoutSwitchDao, private val switchService: LayoutSwitchService, private val kmPostService: LayoutKmPostService, private val kmPostDao: LayoutKmPostDao, private val locationTrackService: LocationTrackService, private val locationTrackDao: LocationTrackDao, private val referenceLineService: ReferenceLineService, private val referenceLineDao: ReferenceLineDao, private val alignmentDao: LayoutAlignmentDao, private val trackNumberDao: LayoutTrackNumberDao, )</ID>
    <ID>LongParameterList:ElementListing.kt$( context: GeocodingContext?, getTransformation: (srid: Srid) -&gt; Transformation, locationTrack: LocationTrack, planHeader: GeometryPlanHeader, alignment: GeometryAlignment, element: GeometryElement, segment: LayoutSegment, getSwitchName: (IntId&lt;TrackLayoutSwitch&gt;) -&gt; SwitchName )</ID>
    <ID>LongParameterList:ElementListing.kt$( context: GeocodingContext?, getTransformation: (srid: Srid) -&gt; Transformation, plan: GeometryPlan, alignment: GeometryAlignment, element: GeometryElement, getSwitchName: (IntId&lt;TrackLayoutSwitch&gt;) -&gt; SwitchName, )</ID>
    <ID>LongParameterList:ElementListing.kt$( context: GeocodingContext?, getTransformation: (srid: Srid) -&gt; Transformation, planId: DomainId&lt;GeometryPlan&gt;, planSource: PlanSource?, fileName: FileName, units: GeometryUnits, trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt;?, trackNumberDescription: PlanElementName?, alignment: GeometryAlignment, locationTrack: LocationTrack?, element: GeometryElement, segment: LayoutSegment?, getSwitchName: (IntId&lt;TrackLayoutSwitch&gt;) -&gt; SwitchName, )</ID>
    <ID>LongParameterList:ElementListing.kt$( context: GeocodingContext?, getTransformation: (srid: Srid) -&gt; Transformation, track: LocationTrack, layoutAlignment: LayoutAlignment, elementTypes: List&lt;TrackGeometryElementType&gt;, startAddress: TrackMeter?, endAddress: TrackMeter?, getPlanHeaderAndAlignment: (id: IntId&lt;GeometryAlignment&gt;) -&gt; Pair&lt;GeometryPlanHeader, GeometryAlignment&gt;, getSwitchName: (IntId&lt;TrackLayoutSwitch&gt;) -&gt; SwitchName, )</ID>
    <ID>LongParameterList:FakeProjektiVelho.kt$FakeProjektiVelho$( oid: Oid&lt;PVDocument&gt;, version: PVId, description: String = "test description", documentType: PVDictionaryCode = PVDictionaryCode("dokumenttityyppi/dt01"), materialState: PVDictionaryCode = PVDictionaryCode("aineistotila/tila01"), materialCategory: PVDictionaryCode = PVDictionaryCode("aineistolaji/al00"), materialGroup: PVDictionaryCode = PVDictionaryCode("aineistoryhma/ar00"), )</ID>
    <ID>LongParameterList:GeocodingDaoIT.kt$GeocodingDaoIT$( val geocodingDao: GeocodingDao, val trackNumberDao: LayoutTrackNumberDao, val referenceLineDao: ReferenceLineDao, val alignmentDao: LayoutAlignmentDao, val alignmentService: LayoutAlignmentService, val kmPostDao: LayoutKmPostDao, val kmPostService: LayoutKmPostService, )</ID>
    <ID>LongParameterList:GeometryController.kt$GeometryController$( @RequestParam("bbox") bbox: BoundingBox?, @RequestParam("sources") sources: List&lt;PlanSource&gt;, @RequestParam("freeText") freeText: FreeText?, @RequestParam("trackNumberIds") trackNumberIds: List&lt;IntId&lt;TrackLayoutTrackNumber&gt;&gt;?, @RequestParam("limit") limit: Int?, @RequestParam("offset") offset: Int?, @RequestParam("sortField") sortField: GeometryPlanSortField?, @RequestParam("sortOrder") sortOrder: SortOrder?, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( constant: Double, rotation: RotationDirection, radiusStart: Double?, radiusEnd: Double?, start: Point, end: Point, dirStartGrads: Double, dirEndGrads: Double, length: Double = clothoidLength(constant, radiusStart, radiusEnd), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( constant: Double, rotation: RotationDirection, radiusStart: Double?, radiusEnd: Double?, start: Point, end: Point, pi: Point, length: Double = clothoidLength(constant, radiusStart, radiusEnd), dirStartGrads: Double? = null, dirEndGrads: Double? = null, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( id: IntId&lt;GeometryPlan&gt; = IntId(1), fileName: FileName = FileName("test_file.xml"), measurementMethod: MeasurementMethod? = MeasurementMethod.VERIFIED_DESIGNED_GEOMETRY, elevationMeasurementMethod: ElevationMeasurementMethod? = ElevationMeasurementMethod.TOP_OF_SLEEPER, srid: Srid = Srid(3879), coordinateSystemName: CoordinateSystemName? = null, trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt; = IntId(1), verticalCoordinateSystem: VerticalCoordinateSystem? = null, source: PlanSource = PlanSource.GEOMETRIAPALVELU, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( length: Double, rotation: RotationDirection, radiusStart: Double?, radiusEnd: Double?, start: Point, end: Point, dirStartGrads: Double, dirEndGrads: Double, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( length: Double, rotation: RotationDirection, radiusStart: Double?, radiusEnd: Double?, start: Point, end: Point, pi: Point, dirStartGrads: Double? = null, dirEndGrads: Double? = null, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( name: String, oidPart: String, start: Point, end: Point, staStart: BigDecimal, length: BigDecimal, elementSwitchData: SwitchData? = null, )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( rotation: RotationDirection, radius: Double, start: Point, end: Point, center: Point, chord: Double = lineLength(start, end), length: Double = circleArcLength(radius, chord), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( start: Point = Point(0.0, 0.0), end: Point = Point(1.0, 1.0), pi: Point = Point(0.0, 1.0), rotation: RotationDirection = CCW, constant: Double = 200.0, id: DomainId&lt;GeometryElement&gt; = StringId(), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( start: Point, end: Point, length: Double = lineLength(start, end), staStart: Double = 0.0, name: PlanElementName, switchData: SwitchData = emptySwitchData(), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( start: Point, end: Point, length: Double = lineLength(start, end), staStart: Double = 0.0, name: String = "Test", switchData: SwitchData = emptySwitchData(), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( trackNumberId: DomainId&lt;TrackLayoutTrackNumber&gt;? = null, elements: List&lt;GeometryElement&gt; = geometryElements(), profile: GeometryProfile? = null, cant: GeometryCant? = null, name: String = "001", id: DomainId&lt;GeometryAlignment&gt; = StringId(), featureTypeCode: FeatureTypeCode = FeatureTypeCode("111"), )</ID>
    <ID>LongParameterList:GeometryDomainTestData.kt$( trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt; = IntId(1), srid: Srid = Srid(3879), alignments: List&lt;GeometryAlignment&gt; = listOf(geometryAlignment(trackNumberId)), switches: List&lt;GeometrySwitch&gt; = listOf(), measurementMethod: MeasurementMethod? = MeasurementMethod.VERIFIED_DESIGNED_GEOMETRY, elevationMeasurementMethod: ElevationMeasurementMethod? = ElevationMeasurementMethod.TOP_OF_SLEEPER, trackNumberDesc: PlanElementName = PlanElementName("TNDesc"), fileName: FileName = FileName("test_file.xml"), coordinateSystemName: CoordinateSystemName? = null, verticalCoordinateSystem: VerticalCoordinateSystem? = null, source: PlanSource = PlanSource.GEOMETRIAPALVELU, planTime: Instant = Instant.EPOCH, kmPosts: List&lt;GeometryKmPost&gt; = kmPosts(trackNumberId), project: Project = project(), units: GeometryUnits = geometryUnits(srid, coordinateSystemName, verticalCoordinateSystem), )</ID>
    <ID>LongParameterList:GeometryElementListPage.kt$E2EDataProductElementListItem$( val trackNumber: String, val alignment: String, val elementType: String, val locationStartE: String, val length: String, val plan: String, val source: String, )</ID>
    <ID>LongParameterList:GeometryService.kt$GeometryService$( private val geometryDao: GeometryDao, private val trackNumberService: LayoutTrackNumberService, private val coordinateTransformationService: CoordinateTransformationService, private val geocodingService: GeocodingService, private val locationTrackService: LocationTrackService, private val planLayoutCache: PlanLayoutCache, private val layoutAlignmentDao: LayoutAlignmentDao, private val switchService: LayoutSwitchService, private val heightTriangleDao: HeightTriangleDao, private val elementListingFileDao: ElementListingFileDao, private val verticalGeometryListingFileDao: VerticalGeometryListingFileDao, private val lockDao: LockDao, private val localizationService: LocalizationService, )</ID>
    <ID>LongParameterList:GeometryService.kt$GeometryService$( startDistance: Double, endDistance: Double, geocodingContext: GeocodingContext, alignment: IAlignment, tickLength: Int, alignmentBoundaryAddresses: List&lt;PlanBoundaryPoint&gt; = listOf(), getHeightAt: (point: LayoutPoint, segmentIndex: Int?) -&gt; Double?, )</ID>
    <ID>LongParameterList:InfraModelConversion.kt$( source: PlanSource, fileName: FileName, infraModel: InfraModel, coordinateSystemNameToSrid: Map&lt;CoordinateSystemName, Srid&gt;, switchStructuresByType: Map&lt;SwitchType, SwitchStructure&gt;, switchTypeNameAliases: Map&lt;String, String&gt;, trackNumberIdsByNumber: Map&lt;TrackNumber, IntId&lt;TrackLayoutTrackNumber&gt;&gt;, )</ID>
    <ID>LongParameterList:InfraModelParsing.kt$( source: PlanSource, file: InfraModelFile, coordinateSystems: Map&lt;CoordinateSystemName, Srid&gt; = mapOf(), switchStructuresByType: Map&lt;SwitchType, SwitchStructure&gt;, switchTypeNameAliases: Map&lt;String, String&gt;, trackNumberIdsByNumber: Map&lt;TrackNumber, IntId&lt;TrackLayoutTrackNumber&gt;&gt;, )</ID>
    <ID>LongParameterList:InfraModelService.kt$InfraModelService$( private val geometryService: GeometryService, private val layoutCache: PlanLayoutCache, private val geometryDao: GeometryDao, private val codeDictionaryService: CodeDictionaryService, private val geographyService: GeographyService, private val switchLibraryService: SwitchLibraryService, private val trackNumberService: LayoutTrackNumberService, private val coordinateTransformationService: CoordinateTransformationService, )</ID>
    <ID>LongParameterList:LayoutSwitchController.kt$LayoutSwitchController$( @PathVariable("publishType") publishType: PublishType, @RequestParam("bbox") bbox: BoundingBox?, @RequestParam("name") name: String?, @RequestParam("offset") offset: Int?, @RequestParam("limit") limit: Int?, @RequestParam("comparisonPoint") comparisonPoint: Point?, @RequestParam("switchType") switchType: String?, @RequestParam("includeSwitchesWithNoJoints") includeSwitchesWithNoJoints: Boolean = false, )</ID>
    <ID>LongParameterList:LinkingDomainTestData.kt$( publicationService: PublicationService, trackNumbers: List&lt;IntId&lt;TrackLayoutTrackNumber&gt;&gt; = listOf(), kmPosts: List&lt;IntId&lt;TrackLayoutKmPost&gt;&gt; = listOf(), switches: List&lt;IntId&lt;TrackLayoutSwitch&gt;&gt; = listOf(), referenceLines: List&lt;IntId&lt;ReferenceLine&gt;&gt; = listOf(), locationTracks: List&lt;IntId&lt;LocationTrack&gt;&gt; = listOf(), )</ID>
    <ID>LongParameterList:LinkingService.kt$LinkingService$( private val geometryService: GeometryService, private val planLayoutService: PlanLayoutService, private val referenceLineService: ReferenceLineService, private val locationTrackService: LocationTrackService, private val layoutKmPostService: LayoutKmPostService, private val linkingDao: LinkingDao, private val coordinateTransformationService: CoordinateTransformationService, )</ID>
    <ID>LongParameterList:LinkingServiceIT.kt$LinkingServiceIT$( private val geometryService: GeometryService, private val planLayoutService: PlanLayoutService, private val geometryDao: GeometryDao, private val linkingService: LinkingService, private val locationTrackService: LocationTrackService, private val trackNumberDao: LayoutTrackNumberDao, private val kmPostDao: LayoutKmPostDao, private val kmPostService: LayoutKmPostService, )</ID>
    <ID>LongParameterList:LinkingTestUI.kt$LinkingTestUI$( private val testGeometryPlanService: TestGeometryPlanService, private val switchDao: LayoutSwitchDao, private val trackNumberDao: LayoutTrackNumberDao, private val kmPostDao: LayoutKmPostDao, private val referenceLineDao: ReferenceLineDao, private val locationTrackDao: LocationTrackDao, private val alignmentDao: LayoutAlignmentDao, )</ID>
    <ID>LongParameterList:PVDao.kt$PVDao$( oid: Oid&lt;PVDocument&gt;, metadata: PVApiDocumentMetadata, latestVersion: PVApiLatestVersion, status: PVDocumentStatus, assignmentOid: Oid&lt;PVAssignment&gt;?, projectOid: Oid&lt;PVProject&gt;?, projectGroupOid: Oid&lt;PVProjectGroup&gt;?, )</ID>
    <ID>LongParameterList:PVIntegrationServiceIT.kt$PVIntegrationServiceIT$( oid: Oid&lt;PVDocument&gt;, status: PVDocumentStatus, description: String = "test description", documentType: PVDictionaryCode = PVDictionaryCode("dokumenttityyppi/dt01"), materialState: PVDictionaryCode = PVDictionaryCode("aineistotila/tila01"), materialCategory: PVDictionaryCode = PVDictionaryCode("aineistolaji/al00"), materialGroup: PVDictionaryCode = PVDictionaryCode("aineistoryhma/ar00"), )</ID>
    <ID>LongParameterList:PlanLayoutTransformation.kt$( alignment: GeometryAlignment, planToLayoutTransformation: Transformation, pointListStepLength: Int, heightTriangles: List&lt;HeightTriangle&gt;, verticalCoordinateSystem: VerticalCoordinateSystem?, includeGeometryData: Boolean = true, )</ID>
    <ID>LongParameterList:PlanLayoutTransformation.kt$( geometryAlignments: List&lt;GeometryAlignment&gt;, planToLayout: Transformation, pointListStepLength: Int, heightTriangles: List&lt;HeightTriangle&gt;, verticalCoordinateSystem: VerticalCoordinateSystem?, includeGeometryData: Boolean = true, )</ID>
    <ID>LongParameterList:PlanLayoutTransformation.kt$( point: Point, mValue: Double, profile: GeometryProfile?, cant: GeometryCant?, alignmentStartStation: Double, segmentStart: Double, triangles: List&lt;HeightTriangle&gt;, verticalCoordinateSystem: VerticalCoordinateSystem?, )</ID>
    <ID>LongParameterList:PublicationController.kt$PublicationController$( @RequestParam("from", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) from: Instant?, @RequestParam("to", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) to: Instant?, @RequestParam("sortBy", required = false) sortBy: PublicationTableColumn?, @RequestParam("order", required = false) order: SortOrder?, @RequestParam("timeZone") timeZone: ZoneId?, @RequestParam("lang") lang: String, )</ID>
    <ID>LongParameterList:PublicationDaoIT.kt$PublicationDaoIT$( val publicationDao: PublicationDao, val switchDao: LayoutSwitchDao, val trackNumberDao: LayoutTrackNumberDao, val kmPostDao: LayoutKmPostDao, val referenceLineDao: ReferenceLineDao, val locationTrackService: LocationTrackService, val locationTrackDao: LocationTrackDao, val alignmentDao: LayoutAlignmentDao, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( from: Instant? = null, to: Instant? = null, sortBy: PublicationTableColumn? = null, order: SortOrder? = null, timeZone: ZoneId? = null, translation: Translation, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( name: String, trackNumbers: Set&lt;TrackNumber&gt;, operation: Operation, publication: PublicationDetails, changedKmNumbers: Set&lt;KmNumber&gt;? = null, propChanges: List&lt;PublicationChange&lt;*&gt;&gt;, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( private val publicationDao: PublicationDao, private val geocodingService: GeocodingService, private val trackNumberService: LayoutTrackNumberService, private val switchService: LayoutSwitchService, private val kmPostService: LayoutKmPostService, private val kmPostDao: LayoutKmPostDao, private val locationTrackService: LocationTrackService, private val locationTrackDao: LocationTrackDao, private val referenceLineService: ReferenceLineService, private val referenceLineDao: ReferenceLineDao, private val alignmentDao: LayoutAlignmentDao, private val switchDao: LayoutSwitchDao, private val switchLibraryService: SwitchLibraryService, private val trackNumberDao: LayoutTrackNumberDao, private val calculatedChangesService: CalculatedChangesService, private val ratkoClient: RatkoClient?, private val ratkoPushDao: RatkoPushDao, private val geometryDao: GeometryDao, private val geocodingCacheService: GeocodingCacheService, private val transactionTemplate: TransactionTemplate, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( translation: Translation, changes: ReferenceLineChanges, newTimestamp: Instant, oldTimestamp: Instant, changedKmNumbers: Set&lt;KmNumber&gt;, getGeocodingContext: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( translation: Translation, changes: SwitchChanges, newTimestamp: Instant, oldTimestamp: Instant, operation: Operation, trackNumberCache: List&lt;TrackNumberAndChangeTime&gt;, geocodingContextGetter: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( translation: Translation, locationTrackChanges: LocationTrackChanges, switchLinkChanges: LocationTrackPublicationSwitchLinkChanges?, publicationTime: Instant, previousPublicationTime: Instant, trackNumberCache: List&lt;TrackNumberAndChangeTime&gt;, addressesChanged: Boolean, changedKmNumbers: Set&lt;KmNumber&gt;, getGeocodingContext: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, )</ID>
    <ID>LongParameterList:PublicationService.kt$PublicationService$( translation: Translation, publication: PublicationDetails, switchLinkChanges: Map&lt;IntId&lt;LocationTrack&gt;, LocationTrackPublicationSwitchLinkChanges&gt;, previousComparisonTime: Instant, geocodingContextGetter: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?, trackNumberNamesCache: List&lt;TrackNumberAndChangeTime&gt; = trackNumberDao.fetchTrackNumberNames(), )</ID>
    <ID>LongParameterList:PublicationServiceIT.kt$PublicationServiceIT$( val publicationService: PublicationService, val publicationDao: PublicationDao, val alignmentDao: LayoutAlignmentDao, val trackNumberDao: LayoutTrackNumberDao, val trackNumberService: LayoutTrackNumberService, val referenceLineDao: ReferenceLineDao, val referenceLineService: ReferenceLineService, val kmPostDao: LayoutKmPostDao, val kmPostService: LayoutKmPostService, val locationTrackDao: LocationTrackDao, val locationTrackService: LocationTrackService, val switchDao: LayoutSwitchDao, val switchService: LayoutSwitchService, val calculatedChangesService: CalculatedChangesService, val localizationService: LocalizationService, val switchStructureDao: SwitchStructureDao, )</ID>
    <ID>LongParameterList:PublicationUtils.kt$( oldValue: Double?, newValue: Double?, threshold: Double, valueTransform: (Double) -&gt; U, propKey: PropKey, remark: String? = null, enumLocalizationKey: String? = null, )</ID>
    <ID>LongParameterList:PublicationUtils.kt$( predicate: () -&gt; Boolean, oldValue: T?, newValue: T?, valueTransform: (T) -&gt; U, propKey: PropKey, remark: String? = null, enumLocalizationKey: String? = null, )</ID>
    <ID>LongParameterList:PublicationValidation.kt$( trackNumber: TrackLayoutTrackNumber, referenceLine: ReferenceLine?, kmPosts: List&lt;TrackLayoutKmPost&gt;, locationTracks: List&lt;LocationTrack&gt;, publishKmPostIds: List&lt;IntId&lt;TrackLayoutKmPost&gt;&gt;, publishedTrackIds: List&lt;IntId&lt;LocationTrack&gt;&gt;, )</ID>
    <ID>LongParameterList:PublicationValidationTest.kt$PublicationValidationTest$( hasError: Boolean, kmPost: TrackLayoutKmPost, trackNumber: TrackLayoutTrackNumber, referenceLine: ReferenceLine?, error: String, includeTrackNumberInPublish: Boolean = false, )</ID>
    <ID>LongParameterList:PublicationValidationTest.kt$PublicationValidationTest$( hasError: Boolean, trackNumber: TrackLayoutTrackNumber, referenceLine: ReferenceLine?, alignment: LocationTrack, error: String, includeAlignmentInPublish: Boolean = false, )</ID>
    <ID>LongParameterList:PublicationValidationTest.kt$PublicationValidationTest$( hasError: Boolean, trackNumber: TrackLayoutTrackNumber, referenceLine: ReferenceLine?, error: String, kmPosts: List&lt;TrackLayoutKmPost&gt; = listOf(), alignments: List&lt;LocationTrack&gt; = listOf(), includeKmPostsInPublish: Boolean = false, includeAlignmentsInPublish: Boolean = false, )</ID>
    <ID>LongParameterList:PublicationValidationTest.kt$PublicationValidationTest$( hasError: Boolean, trackNumber: TrackLayoutTrackNumber, referenceLine: ReferenceLine?, kmPost: TrackLayoutKmPost, error: String, includeKmPostInPublish: Boolean = false, )</ID>
    <ID>LongParameterList:RatkoPushDao.kt$RatkoPushDao$( ratkoPushId: IntId&lt;RatkoPush&gt;, ratkoPushErrorType: RatkoPushErrorType, operation: RatkoOperation, assetType: RatkoAssetType, assetId: IntId&lt;T&gt;, responseBody: String, )</ID>
    <ID>LongParameterList:RatkoPushDaoIT.kt$RatkoPushDaoIT$( trackNumbers: List&lt;IntId&lt;TrackLayoutTrackNumber&gt;&gt; = listOf(), referenceLines: List&lt;IntId&lt;ReferenceLine&gt;&gt; = listOf(), locationTracks: List&lt;IntId&lt;LocationTrack&gt;&gt; = listOf(), switches: List&lt;IntId&lt;TrackLayoutSwitch&gt;&gt; = listOf(), kmPosts: List&lt;IntId&lt;TrackLayoutKmPost&gt;&gt; = listOf(), message: String = "", )</ID>
    <ID>LongParameterList:RatkoService.kt$RatkoService$( private val ratkoClient: RatkoClient, private val ratkoLocationTrackService: RatkoLocationTrackService, private val ratkoRouteNumberService: RatkoRouteNumberService, private val ratkoAssetService: RatkoAssetService, private val ratkoPushDao: RatkoPushDao, private val publicationService: PublicationService, private val calculatedChangesService: CalculatedChangesService, private val locationTrackService: LocationTrackService, private val switchService: LayoutSwitchService, private val lockDao: LockDao, )</ID>
    <ID>LongParameterList:RatkoServiceIT.kt$RatkoServiceIT$( val trackNumberService: LayoutTrackNumberService, val locationTrackService: LocationTrackService, val locationTrackDao: LocationTrackDao, val referenceLineService: ReferenceLineService, val referenceLineDao: ReferenceLineDao, val alignmentDao: LayoutAlignmentDao, val ratkoService: RatkoService, val layoutTrackNumberDao: LayoutTrackNumberDao, val publicationService: PublicationService, val switchService: LayoutSwitchService, val switchDao: LayoutSwitchDao, val kmPostService: LayoutKmPostService, val kmPostDao: LayoutKmPostDao, val fakeRatkoService: FakeRatkoService, val geometryDao: GeometryDao, )</ID>
    <ID>LongParameterList:SwitchLinkingService.kt$( jointsInLayoutSpace: List&lt;SwitchJoint&gt;, switchStructure: SwitchStructure, alignments: List&lt;Pair&lt;LocationTrack, LayoutAlignment&gt;&gt;, alignmentEndPoint: LocationTrackEndpoint?, geometrySwitch: GeometrySwitch? = null, geometryPlanId: IntId&lt;GeometryPlan&gt;? = null, getMeasurementMethod: (switchId: IntId&lt;GeometrySwitch&gt;) -&gt; MeasurementMethod?, )</ID>
    <ID>LongParameterList:SwitchLinkingService.kt$( locationTrackEndpoint: LocationTrackEndpoint, switchStructure: SwitchStructure, alignmentMappings: List&lt;SuggestedSwitchCreateParamsAlignmentMapping&gt;, nearbyAlignments: List&lt;Pair&lt;LocationTrack, LayoutAlignment&gt;&gt;, alignmentById: Map&lt;IntId&lt;LocationTrack&gt;, Pair&lt;LocationTrack, LayoutAlignment&gt;&gt;, getMeasurementMethod: (switchId: IntId&lt;GeometrySwitch&gt;) -&gt; MeasurementMethod?, )</ID>
    <ID>LongParameterList:SwitchLinkingService.kt$( point: IPoint, alignment1: IAlignment, alignment2: IAlignment, switchAlignment1: SwitchAlignment, switchAlignment2: SwitchAlignment, joint: SwitchJoint, switchStructure: SwitchStructure, )</ID>
    <ID>LongParameterList:SwitchLinkingService.kt$SwitchLinkingService$( private val switchService: LayoutSwitchService, private val locationTrackService: LocationTrackService, private val locationTrackDao: LocationTrackDao, private val linkingDao: LinkingDao, private val geometryDao: GeometryDao, private val switchLibraryService: SwitchLibraryService, private val coordinateTransformationService: CoordinateTransformationService, )</ID>
    <ID>LongParameterList:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$( private val switchLinkingService: SwitchLinkingService, private val switchDao: LayoutSwitchDao, private val trackNumberDao: LayoutTrackNumberDao, private val locationTrackService: LocationTrackService, private val geometryDao: GeometryDao, private val switchStructureDao: SwitchStructureDao, private val kkjTm35FinTriangulationDao: KkjTm35finTriangulationDao )</ID>
    <ID>LongParameterList:TestRatkoAsset.kt$( id: String, name: String = "routenumber-$id", description: String = "description $id", state: RatkoRouteNumberState = RatkoRouteNumberState(RatkoRouteNumberStateType.VALID), rowMetadata: RatkoMetadata = RatkoMetadata(), nodecollection: InterfaceRatkoNodes = InterfaceRatkoNodes(listOf(), RatkoNodesType.POINT) )</ID>
    <ID>LongParameterList:TestRatkoAsset.kt$( id: String, name: String = "trackname-$id", description: String = "description", routenumber: RatkoOid&lt;RatkoRouteNumber&gt; = RatkoOid("1.2.3.4.5"), nodecollection: InterfaceRatkoNodes = InterfaceRatkoNodes(listOf(), RatkoNodesType.POINT), type: RatkoLocationTrackType = RatkoLocationTrackType.MAIN, state: RatkoLocationTrackState = RatkoLocationTrackState.IN_USE, rowMetadata: RatkoMetadata = RatkoMetadata(), duplicateOf: String? = null, topologicalConnectivityType: RatkoTopologicalConnectivityType = RatkoTopologicalConnectivityType.NONE, )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( number: TrackNumber = TrackNumber("100"), description: String = "Test Track number $number", draft: Boolean = false, externalId: Oid&lt;TrackLayoutTrackNumber&gt;? = Oid( "${nextInt(10, 1000)}.${nextInt(10, 1000)}.${nextInt(10, 1000)}" ), state: LayoutState = LayoutState.IN_USE, id: DomainId&lt;TrackLayoutTrackNumber&gt; = StringId(), )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( points: List&lt;LayoutPoint&gt;, start: Double = 0.0, resolution: Int = 1, sourceId: DomainId&lt;GeometryElement&gt;? = null, sourceStart: Double? = null, source: GeometrySource = PLAN, id: DomainId&lt;LayoutSegment&gt; = StringId(), )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( points: List&lt;LayoutPoint&gt;, start: Double = 0.0, source: GeometrySource = PLAN, sourceId: DomainId&lt;GeometryElement&gt;? = null, sourceStart: Double? = null, resolution: Int = 1, switchId: IntId&lt;TrackLayoutSwitch&gt;? = null, startJointNumber: JointNumber? = null, endJointNumber: JointNumber? = null, )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( seed: Int = 1, structureId: IntId&lt;SwitchStructure&gt; = switchStructureYV60_300_1_9().id as IntId, joints: List&lt;TrackLayoutSwitchJoint&gt; = joints(seed), name: String = "TV$seed", externalId: String? = null, stateCategory: LayoutStateCategory = getSomeValue(seed), )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt;, alignment: LayoutAlignment? = null, id: IntId&lt;LocationTrack&gt;? = null, draft: Draft&lt;LocationTrack&gt;? = null, name: String = "T001 ${locationTrackNameCounter++}", description: String = "test-alignment 001", type: LocationTrackType = LocationTrackType.SIDE, state: LayoutState = LayoutState.IN_USE, externalId: Oid&lt;LocationTrack&gt;? = someOid(), alignmentVersion: RowVersion&lt;LayoutAlignment&gt;? = null, topologyStartSwitch: TopologyLocationTrackSwitch? = null, topologyEndSwitch: TopologyLocationTrackSwitch? = null, duplicateOf: IntId&lt;LocationTrack&gt;? = null, )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( trackNumberId: IntId&lt;TrackLayoutTrackNumber&gt;, segments: List&lt;LayoutSegment&gt;, id: IntId&lt;LocationTrack&gt;? = null, draft: Draft&lt;LocationTrack&gt;? = null, name: String = "T001 ${locationTrackNameCounter++}", description: String = "test-alignment 001", )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$( vararg points: IPoint, start: Double = 0.0, source: GeometrySource = PLAN, sourceId: DomainId&lt;GeometryElement&gt;? = null, switchId: IntId&lt;TrackLayoutSwitch&gt;? = null, startJointNumber: JointNumber? = null, endJointNumber: JointNumber? = null, sourceStart: Double? = null, )</ID>
    <ID>LongParameterList:TrackLayoutDomainTestData.kt$(minX: Double, maxX: Double, minY: Double, maxY: Double, m: Double, fraction: Double = rand.nextDouble())</ID>
    <ID>LongParameterList:VerticalGeometryListing.kt$( planHeader: GeometryPlanHeader, getTransformation: (srid: Srid) -&gt; Transformation, geocodingContext: GeocodingContext?, geometryAlignment: GeometryAlignment, segment: CurvedProfileSegment, endAddress: TrackMeter?, startAddress: TrackMeter?, track: LocationTrack, curvedProfileSegments: List&lt;CurvedProfileSegment&gt;, linearProfileSegments: List&lt;LinearProfileSegment&gt;, )</ID>
    <ID>LongParameterList:VerticalGeometryListing.kt$( segment: CurvedProfileSegment, alignment: GeometryAlignment, locationTrackName: AlignmentName?, coordinateTransform: Transformation?, planHeader: GeometryPlanHeader, geocodingContext: GeocodingContext?, curvedSegments: List&lt;CurvedProfileSegment&gt;, linearSegments: List&lt;LinearProfileSegment&gt;, segmentStartAddress: TrackMeter?, segmentEndAddress: TrackMeter?, segmentStartLocation: RoundedPoint?, segmentEndLocation: RoundedPoint? )</ID>
    <ID>LongParameterList:VerticalGeometryListing.kt$( track: LocationTrack, layoutAlignment: LayoutAlignment, startAddress: TrackMeter?, endAddress: TrackMeter?, geocodingContext: GeocodingContext?, getTransformation: (srid: Srid) -&gt; Transformation, getPlanHeaderAndAlignment: (id: IntId&lt;GeometryAlignment&gt;) -&gt; Pair&lt;GeometryPlanHeader, GeometryAlignment&gt;, )</ID>
    <ID>MagicNumber:AlignmentName.kt$50</ID>
    <ID>MagicNumber:Angle.kt$0.5</ID>
    <ID>MagicNumber:Angle.kt$180</ID>
    <ID>MagicNumber:Angle.kt$200</ID>
    <ID>MagicNumber:Angle.kt$Grads$100</ID>
    <ID>MagicNumber:Angle.kt$Rads$0.5</ID>
    <ID>MagicNumber:BiquadraticParabola.kt$3</ID>
    <ID>MagicNumber:BiquadraticParabola.kt$4</ID>
    <ID>MagicNumber:BiquadraticParabola.kt$48</ID>
    <ID>MagicNumber:BiquadraticParabola.kt$6</ID>
    <ID>MagicNumber:BoundingBox.kt$3</ID>
    <ID>MagicNumber:BoundingBox.kt$4</ID>
    <ID>MagicNumber:CacheConfiguration.kt$24</ID>
    <ID>MagicNumber:CacheConfiguration.kt$60</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$10</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$100</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$10000</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$2000</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$50</ID>
    <ID>MagicNumber:CacheConfiguration.kt$CacheConfiguration$500</ID>
    <ID>MagicNumber:Clothoid.kt$3</ID>
    <ID>MagicNumber:Clothoid.kt$4</ID>
    <ID>MagicNumber:CookieSigner.kt$CookieSigner$5</ID>
    <ID>MagicNumber:CookieSigner.kt$CookieSigner$8</ID>
    <ID>MagicNumber:CoordinateSystem.kt$100</ID>
    <ID>MagicNumber:CsvMigration.kt$CsvMigration$9</ID>
    <ID>MagicNumber:FeatureTypeCode.kt$3</ID>
    <ID>MagicNumber:FileName.kt$100</ID>
    <ID>MagicNumber:Geocoding.kt$10.0</ID>
    <ID>MagicNumber:Geocoding.kt$GeocodingContext$3</ID>
    <ID>MagicNumber:GeometryElement.kt$GeometryClothoid$32</ID>
    <ID>MagicNumber:GeometryService.kt$GeometryService$12L</ID>
    <ID>MagicNumber:GeometrySwitch.kt$30</ID>
    <ID>MagicNumber:GeometryValidation.kt$0.0001</ID>
    <ID>MagicNumber:GeometryValidation.kt$6</ID>
    <ID>MagicNumber:HttpsUrl.kt$2000</ID>
    <ID>MagicNumber:InfraModelConversion.kt$3</ID>
    <ID>MagicNumber:InfraModelConversion.kt$4022</ID>
    <ID>MagicNumber:InfraModelConversion.kt$6</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$0.103</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$1.86</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$16.846</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$3</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$33.589</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$33.692</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$4</ID>
    <ID>MagicNumber:KRV43_233_1_9.kt$5</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$0.096</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$1.206</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$1.833</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$17.540</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$29.006</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$29.07</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$3</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$34.984</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$35.080</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$4</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$5</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$6.010</ID>
    <ID>MagicNumber:KRV43_270_1_9_514.kt$6.0734</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$0.105</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$1.223</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$1.902</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$17.223</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$28.232</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$28.300</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$3</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$34.341</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$34.446</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$4</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$5</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$6.15</ID>
    <ID>MagicNumber:KRV54_200_1_9.kt$6.214</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$1.089</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$1.833</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$10.0</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$10.42</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$20.42</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$20.783</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$27.864</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$3</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$30.783</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$37.864</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$37.96</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$4</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$5</ID>
    <ID>MagicNumber:KV30_270_1_9_514.kt$6</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$1.265</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$1.266</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$1.834</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$11.274</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$11.31</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$23.35</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$23.38</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$28.754</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$3</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$35.42</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$4</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$40.824</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$40.92</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$5</ID>
    <ID>MagicNumber:KV43_300_1_9_514.kt$6</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$1.223</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$1.902</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$11.077</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$11.323</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$22.086</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$22.4</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$28.195</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$3</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$33.406</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$39.518</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$39.623</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$4</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$5</ID>
    <ID>MagicNumber:KV54_200_1_9.kt$6</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$2391</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$2392</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$2393</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$2394</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$3386</ID>
    <ID>MagicNumber:KkjEtrsTransformation.kt$3387</ID>
    <ID>MagicNumber:KmNumber.kt$KmNumber$4</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$0.01</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$10</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$11</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$12</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$3</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$4</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$5</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$6</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$7</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$8</ID>
    <ID>MagicNumber:LayoutAlignmentDao.kt$LayoutAlignmentDao$9</ID>
    <ID>MagicNumber:Linking.kt$LocationTrackSaveRequest$256</ID>
    <ID>MagicNumber:Linking.kt$LocationTrackSaveRequest$4</ID>
    <ID>MagicNumber:Linking.kt$TrackNumberSaveRequest$100</ID>
    <ID>MagicNumber:LocalizationKey.kt$100</ID>
    <ID>MagicNumber:LoggerExternal.kt$1000</ID>
    <ID>MagicNumber:Math.kt$3</ID>
    <ID>MagicNumber:Math.kt$6</ID>
    <ID>MagicNumber:Oid.kt$5</ID>
    <ID>MagicNumber:Oid.kt$50</ID>
    <ID>MagicNumber:PVApi.kt$100</ID>
    <ID>MagicNumber:PVApi.kt$30</ID>
    <ID>MagicNumber:PVApi.kt$50</ID>
    <ID>MagicNumber:PVApi.kt$5000</ID>
    <ID>MagicNumber:PVApi.kt$PVAccessToken$60</ID>
    <ID>MagicNumber:PVClient.kt$60</ID>
    <ID>MagicNumber:PVClient.kt$PVClient$100</ID>
    <ID>MagicNumber:PVClient.kt$PVClient$404</ID>
    <ID>MagicNumber:PVClientConfiguration.kt$100</ID>
    <ID>MagicNumber:PVClientConfiguration.kt$1024</ID>
    <ID>MagicNumber:PVClientConfiguration.kt$5L</ID>
    <ID>MagicNumber:PVDictionary.kt$100</ID>
    <ID>MagicNumber:PVDictionary.kt$50</ID>
    <ID>MagicNumber:PVDocument.kt$200</ID>
    <ID>MagicNumber:PVIntegrationService.kt$365</ID>
    <ID>MagicNumber:PVIntegrationService.kt$PVIntegrationService$15</ID>
    <ID>MagicNumber:PlanElementName.kt$100</ID>
    <ID>MagicNumber:PlanLayoutTransformation.kt$0.001</ID>
    <ID>MagicNumber:PlanLayoutTransformation.kt$6</ID>
    <ID>MagicNumber:PlanMetaData.kt$100</ID>
    <ID>MagicNumber:ProjectName.kt$100</ID>
    <ID>MagicNumber:Publication.kt$Operation.CALCULATED$4</ID>
    <ID>MagicNumber:Publication.kt$Operation.RESTORE$3</ID>
    <ID>MagicNumber:PublicationController.kt$15</ID>
    <ID>MagicNumber:PublicationController.kt$PublicationController$50</ID>
    <ID>MagicNumber:PublicationController.kt$PublicationController$500</ID>
    <ID>MagicNumber:PublicationUtils.kt$0.1</ID>
    <ID>MagicNumber:PublicationValidation.kt$5</ID>
    <ID>MagicNumber:RR54_1_9.kt$0.105</ID>
    <ID>MagicNumber:RR54_1_9.kt$1.902</ID>
    <ID>MagicNumber:RR54_1_9.kt$17.223</ID>
    <ID>MagicNumber:RR54_1_9.kt$3</ID>
    <ID>MagicNumber:RR54_1_9.kt$34.341</ID>
    <ID>MagicNumber:RR54_1_9.kt$34.446</ID>
    <ID>MagicNumber:RR54_1_9.kt$4</ID>
    <ID>MagicNumber:RR54_1_9.kt$5</ID>
    <ID>MagicNumber:RR54_2x1_9.kt$1.239</ID>
    <ID>MagicNumber:RR54_2x1_9.kt$11.148</ID>
    <ID>MagicNumber:RR54_2x1_9.kt$3</ID>
    <ID>MagicNumber:RR54_2x1_9.kt$4</ID>
    <ID>MagicNumber:RR54_2x1_9.kt$5</ID>
    <ID>MagicNumber:RatkoClient.kt$RatkoClient$1000</ID>
    <ID>MagicNumber:RatkoClientConfiguration.kt$5L</ID>
    <ID>MagicNumber:RatkoCommonModel.kt$4326</ID>
    <ID>MagicNumber:RatkoConversion.kt$10</ID>
    <ID>MagicNumber:RatkoConversion.kt$11</ID>
    <ID>MagicNumber:RatkoConversion.kt$13</ID>
    <ID>MagicNumber:RatkoConversion.kt$16</ID>
    <ID>MagicNumber:RatkoConversion.kt$17</ID>
    <ID>MagicNumber:RatkoConversion.kt$3</ID>
    <ID>MagicNumber:RatkoConversion.kt$4</ID>
    <ID>MagicNumber:RatkoConversion.kt$5</ID>
    <ID>MagicNumber:RatkoConversion.kt$6</ID>
    <ID>MagicNumber:RatkoConversion.kt$7</ID>
    <ID>MagicNumber:RatkoConversion.kt$8</ID>
    <ID>MagicNumber:RatkoService.kt$RatkoService$120</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$1.745</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$13</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$16</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$17</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$29.555</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$3.553</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$58.896</ID>
    <ID>MagicNumber:SKV60_1000_474_1_15_5.kt$59.058</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$16</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$17</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$2.105</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$3.967</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$58.807</ID>
    <ID>MagicNumber:SKV60_800_423_1_15_5.kt$59.003</ID>
    <ID>MagicNumber:SRR54_2x1_9_4_8.kt$3</ID>
    <ID>MagicNumber:SRR54_2x1_9_4_8.kt$4</ID>
    <ID>MagicNumber:SRR54_2x1_9_4_8.kt$4.482</ID>
    <ID>MagicNumber:SRR54_2x1_9_4_8.kt$5</ID>
    <ID>MagicNumber:SRR54_2x1_9_4_8.kt$9.0</ID>
    <ID>MagicNumber:SRR54_2x1_9_6_0.kt$3</ID>
    <ID>MagicNumber:SRR54_2x1_9_6_0.kt$4</ID>
    <ID>MagicNumber:SRR54_2x1_9_6_0.kt$5</ID>
    <ID>MagicNumber:SRR54_2x1_9_6_0.kt$9.0</ID>
    <ID>MagicNumber:SRR54_2x1_9_6_0.kt$9.927</ID>
    <ID>MagicNumber:SRR60_2x1_9_4_8.kt$3</ID>
    <ID>MagicNumber:SRR60_2x1_9_4_8.kt$4</ID>
    <ID>MagicNumber:SRR60_2x1_9_4_8.kt$5</ID>
    <ID>MagicNumber:SRR60_2x1_9_4_8.kt$5.087</ID>
    <ID>MagicNumber:SRR60_2x1_9_4_8.kt$9.0</ID>
    <ID>MagicNumber:Srid.kt$1024</ID>
    <ID>MagicNumber:Srid.kt$32767</ID>
    <ID>MagicNumber:SwitchLinkingService.kt$0.1</ID>
    <ID>MagicNumber:SwitchLinkingService.kt$0.2</ID>
    <ID>MagicNumber:SwitchLinkingService.kt$0.5</ID>
    <ID>MagicNumber:SwitchLinkingService.kt$2.25</ID>
    <ID>MagicNumber:SwitchLinkingService.kt$SwitchLinkingService$1.5</ID>
    <ID>MagicNumber:SwitchName.kt$50</ID>
    <ID>MagicNumber:SwitchStructure.kt$0.1</ID>
    <ID>MagicNumber:SwitchStructure.kt$3</ID>
    <ID>MagicNumber:SwitchStructure.kt$5</ID>
    <ID>MagicNumber:TYV54_200_1_4_44.kt$1.223</ID>
    <ID>MagicNumber:TYV54_200_1_4_44.kt$11.077</ID>
    <ID>MagicNumber:TYV54_200_1_4_44.kt$22.086</ID>
    <ID>MagicNumber:TYV54_200_1_4_44.kt$3</ID>
    <ID>MagicNumber:TYV54_200_1_4_44.kt$5</ID>
    <ID>MagicNumber:TYV54_200_1_4_44TPE.kt$1.236</ID>
    <ID>MagicNumber:TYV54_200_1_4_44TPE.kt$11.077</ID>
    <ID>MagicNumber:TYV54_200_1_4_44TPE.kt$22.305</ID>
    <ID>MagicNumber:TYV54_200_1_4_44TPE.kt$3</ID>
    <ID>MagicNumber:TYV54_200_1_4_44TPE.kt$5</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$0.663</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$0.941</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$17.322</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$20.942</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$3</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$5</ID>
    <ID>MagicNumber:TYV54_225_1_6_46.kt$8.706</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$0.663</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$0.949</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$17.421</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$21.140</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$3</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$5</ID>
    <ID>MagicNumber:TYV54_225_1_6_46TPE.kt$8.706</ID>
    <ID>MagicNumber:TrackLayout.kt$256</ID>
    <ID>MagicNumber:TrackLayout.kt$3067</ID>
    <ID>MagicNumber:TrackLayout.kt$4</ID>
    <ID>MagicNumber:TrackLayout.kt$TrackLayoutSwitch$10</ID>
    <ID>MagicNumber:TrackLayout.kt$TrackLayoutSwitch$3</ID>
    <ID>MagicNumber:TrackLayout.kt$TrackLayoutTrackNumber$100</ID>
    <ID>MagicNumber:TrackNumber.kt$30</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$0.256</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$0.785</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$1.054</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$1.480</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$10</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$10.476</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$11</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$14.143</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$19.865</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$28.228</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$28.284</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$7</ID>
    <ID>MagicNumber:UKV54_1500_228_1_9.kt$8</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$0.499</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$0.731</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$1.398</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$10</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$11</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$14.138</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$19.403</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$28.230</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$28.268</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$7</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$8</ID>
    <ID>MagicNumber:UKV54_800_258_1_9.kt$9.709</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$0.400</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$1.498</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$10</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$10.074</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$11</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$14.141</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$28.217</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$28.290</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$7</ID>
    <ID>MagicNumber:UKV60_1000_244_1_9.kt$8</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$0.666</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$1.229</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$10</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$11</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$14.135</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$28.234</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$28.254</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$7</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$8</ID>
    <ID>MagicNumber:UKV60_600_281_1_9.kt$8.921</ID>
    <ID>MagicNumber:UserData.kt$20</ID>
    <ID>MagicNumber:UserData.kt$3</ID>
    <ID>MagicNumber:UserData.kt$30</ID>
    <ID>MagicNumber:WktGeometries.kt$3</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$0.105</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$1.223</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$1.902</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$17.223</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$28.232</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$28.300</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$3</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$34.341</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$34.446</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$4</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$5</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$6.15</ID>
    <ID>MagicNumber:YRV54_200_1_9.kt$6.214</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$1.859</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$1.872</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$12.685</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$25.701</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$25.795</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$25.928</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$3</ID>
    <ID>MagicNumber:YV30_270_1_7.kt$5</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$1.293</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$1.833</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$10.422</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$22.722</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$27.866</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$27.962</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$3</ID>
    <ID>MagicNumber:YV30_270_1_9_514.kt$5</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$1.809</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$1.842</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$13.481</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$26.145</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$26.375</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$26.506</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$3</ID>
    <ID>MagicNumber:YV43_300_1_7.kt$5</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$1.326</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$1.86</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$12.004</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$23.935</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$28.747</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$28.85</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$3</ID>
    <ID>MagicNumber:YV43_300_1_9.kt$5</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$1.265</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$1.833</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$11.31</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$23.35</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$28.754</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$28.85</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$3</ID>
    <ID>MagicNumber:YV43_300_1_9_514.kt$5</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$1.174</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$1.689</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$15.802</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$3</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$35.256</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$42.984</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$43.195</ID>
    <ID>MagicNumber:YV43_530_1_15.kt$5</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$1.658</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$1.842</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$13.482</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$25.09</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$26.376</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$26.506</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$3</ID>
    <ID>MagicNumber:YV54_165_1_7.kt$5</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$1.91</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$13.504</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$26.87</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$27.006</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$3</ID>
    <ID>MagicNumber:YV54_190_1_7.kt$5</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$1.223</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$1.902</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$11.077</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$22.086</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$28.195</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$28.300</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$3</ID>
    <ID>MagicNumber:YV54_200_1_9.kt$5</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$1.872</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$3</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$30.06</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$5</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$59.04</ID>
    <ID>MagicNumber:YV54_900_1_15_5.kt$59.1</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$1.835</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$16.615</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$3</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$33.128</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$33.23</ID>
    <ID>MagicNumber:YV60_300P_1_9.kt$5</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$1.291</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$1.894</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$12.97</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$25.876</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$3</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$31.914</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$32.008</ID>
    <ID>MagicNumber:YV60_300_1_10.kt$5</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$1.835</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$1.967</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$16.615</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$3</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$33.128</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$34.321</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$34.430</ID>
    <ID>MagicNumber:YV60_300_1_9.kt$5</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$0.182</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$1.876</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$1.945</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$105.327</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$107.143</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$107.180</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$3</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$36.979</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$5</ID>
    <ID>MagicNumber:YV60_5000_2500_1_26.kt$56.563</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$0.074</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$1.921</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$112.005</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$112.039</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$24.653</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$3</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$5</ID>
    <ID>MagicNumber:YV60_5000_3000_1_28.kt$58.220</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$2.016</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$22.471</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$3</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$44.852</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$44.943</ID>
    <ID>MagicNumber:YV60_500_1_11_1.kt$5</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$1.271</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$1.931</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$17.834</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$3</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$35.623</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$44.874</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$44.943</ID>
    <ID>MagicNumber:YV60_500_1_14.kt$5</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$1.058</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$1.867</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$1.870</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$3</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$30.060</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$5</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$59.002</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$59.040</ID>
    <ID>MagicNumber:YV60_900_1_15_5.kt$59.100</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$1.386</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$1.869</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$25.999</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$3</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$5</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$50.941</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$59.648</ID>
    <ID>MagicNumber:YV60_900_1_18.kt$59.700</ID>
    <ID>MatchingDeclarationName:Accordion.kt$E2EAccordion : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:AppBar.kt$E2EAppBar : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:Button.kt$E2EButton : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:CSVPrintingUtils.kt$CsvEntry&lt;T&gt;</ID>
    <ID>MatchingDeclarationName:Checkbox.kt$E2ECheckbox : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:CloudFrontCookie.kt$CloudFrontCookies</ID>
    <ID>MatchingDeclarationName:DataImportUtil.kt$ImportUser</ID>
    <ID>MatchingDeclarationName:Dropdown.kt$E2EDropdown : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:FormGroup.kt$E2EFormGroup : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:FormLayout.kt$E2EFormLayout : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:FrontPageElement.kt$E2EPublicationDetailRow</ID>
    <ID>MatchingDeclarationName:InfoBox.kt$E2EInfoBox : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:InfraModelForm.kt$E2EInfraModelForm : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:InfraModelMigration.kt$V12_01__InfraModelMigration : BaseJavaMigration</ID>
    <ID>MatchingDeclarationName:InfraModelPage.kt$E2EInfraModelPage : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:Radio.kt$E2ERadio : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:SelectionPanel.kt$E2ESelectionPanel : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:Table.kt$E2ETable&lt;T&gt; : E2EList</ID>
    <ID>MatchingDeclarationName:TextInput.kt$E2ETextInput</ID>
    <ID>MatchingDeclarationName:ToolPanel.kt$E2EToolPanel : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:TrackLayoutPage.kt$E2ETrackLayoutPage : E2EViewFragment</ID>
    <ID>MatchingDeclarationName:VaylaLoginPage.kt$E2EVaylaLoginPage</ID>
    <ID>MatchingDeclarationName:ViewFragment.kt$E2EViewFragment</ID>
    <ID>MatchingDeclarationName:WebConfiguration.kt$WebConfig : WebMvcConfigurer</ID>
    <ID>MatchingDeclarationName:XmlUtils.kt$XmlCharset</ID>
    <ID>MaxLineLength:AddressChangesServiceIT.kt$AddressChangesServiceIT$val contextKey = geocodingDao.getLayoutGeocodingContextCacheKey(OFFICIAL, setupData.locationTrack.trackNumberId)!!</ID>
    <ID>MaxLineLength:AddressChangesServiceIT.kt$AddressChangesServiceIT$val startAddress = geocodingService.getAddress(OFFICIAL, trackNumberId, setupData.locationTrackGeometry.start!!)!!.first</ID>
    <ID>MaxLineLength:AlignmentGeometry.kt$(resolution == null || (p.m - previousM).roundToInt() &gt;= resolution || (p.m == alignment.length &amp;&amp; previousM &lt; p.m))</ID>
    <ID>MaxLineLength:AngleTest.kt$AngleTest$assertEquals(geoRads, radsMathToGeo(radsGeoToMath(geoRads)), delta, "math=PI*${mathRads/PI} geo=PI*${geoRads/PI}")</ID>
    <ID>MaxLineLength:AngleTest.kt$AngleTest$assertEquals(mathRads, radsGeoToMath(radsMathToGeo(mathRads)), delta, "math=PI*${mathRads/PI} geo=PI*${geoRads/PI}")</ID>
    <ID>MaxLineLength:AngleTest.kt$AngleTest$assertEquals(relativeAngle(a, b), -relativeAngle(b, a), DOUBLE_CALC_DELTA, "relativeAngle antisymmetry with (a, b) = ($a, $b")</ID>
    <ID>MaxLineLength:ApiErrorHandler.kt$response.statusCode.is4xxClientError -&gt; log.warn("Client error: correlationId=$correlationId $response exception=\"$ex\"")</ID>
    <ID>MaxLineLength:AuthorizationIT.kt$"eyJhbGciOiJIUzI1NiIsImtpZCI6InF3ZXItdHl1aS1vcDEyLWFzZGZnaGprbHp4Y3YiLCJ0eXAiOiJKV1QiLCJjbGllbnQiOiIxMjM0NTY3ODkwYWJjZGVmZyIsInNpZ25lciI6Imh0dHBzOi8vbG9jYWxob3N0OjUwMDAiLCJleHAiOjE2MzU3ODEzOTd9.eyJjdXN0b206cm9vbGkiOiJnZW92aWl0ZV9zZWxhYWphIiwic3ViIjoiMTIzNDU2Nzg5MCIsImN1c3RvbTpzdWt1bmltaSI6IkRvZSIsImVtYWlsX3ZlcmlmaWVkIjoiZmFsc2UiLCJjdXN0b206ZXR1bmltaSI6IkpvaG4iLCJjdXN0b206cHVoZWxpbiI6IiszNTgwMDAwMDAwIiwiY3VzdG9tOnVpZCI6IkExMjM0NTYiLCJjdXN0b206b3JnYW5pc2FhdGlvIjoiVGVzdCBPeSIsImVtYWlsIjoiam9obi5kb2VAdGVzdC5maSIsInVzZXJuYW1lIjoiam9obi5kb2VAdGVzdC5maSIsImV4cCI6MTYzNTc4MTM5NywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMCJ9.RFlxp6lIO4HkPv6IQCPHXepHzmzJml4v_7b92qfl1EU"</ID>
    <ID>MaxLineLength:BasicMapTestUI.kt$BasicMapTestUI$// TODO: GVT-1945 Don't use shared test data - init the data in the test as is needed, so it's clear what is expected</ID>
    <ID>MaxLineLength:BiquadraticParabolaTest.kt$BiquadraticParabolaTest$private fun biquadraticParabolaFunction(R: Double, L: Double)</ID>
    <ID>MaxLineLength:BoundingPolygon.kt$fun</ID>
    <ID>MaxLineLength:CalculatedChangesService.kt$CalculatedChanges$"Duplicate location tracks in direct and indirect changes, directChanges=${directChanges.locationTrackChanges} indirectChanges=${indirectChanges.locationTrackChanges}"</ID>
    <ID>MaxLineLength:CalculatedChangesService.kt$CalculatedChanges$"Duplicate switches in direct and indirect changes, directChanges=${directChanges.switchChanges} indirectChanges=${indirectChanges.switchChanges}"</ID>
    <ID>MaxLineLength:CalculatedChangesService.kt$CalculatedChanges$"Duplicate track numbers in direct and indirect changes, directChanges=${directChanges.trackNumberChanges} indirectChanges=${indirectChanges.trackNumberChanges}"</ID>
    <ID>MaxLineLength:CalculatedChangesService.kt$CalculatedChangesService$val</ID>
    <ID>MaxLineLength:CalculatedChangesServiceIT.kt$CalculatedChangesServiceIT$fun</ID>
    <ID>MaxLineLength:ChangeContext.kt$inline</ID>
    <ID>MaxLineLength:ClientException.kt$DuplicateNameInPublicationException$localizedMessageKey = "error.publication.duplicate-name-on.${if (type == DuplicateNameInPublication.SWITCH) "switch" else "track-number"}"</ID>
    <ID>MaxLineLength:CommonTestData.kt$SwitchJointData$logger.info("Matching switch element (${switchElement.start},${switchElement.end}) to ${startSwitchJoint.number}-${endSwitchJoint.number}")</ID>
    <ID>MaxLineLength:CookieSigner.kt$CookieSigner$private val distributionDnsName: String by lazy { SpringContextUtility.getProperty("geoviite.cloudfront.distribution-name") }</ID>
    <ID>MaxLineLength:CoordinateTransformationService.kt$Transformation$require</ID>
    <ID>MaxLineLength:CoordinateTransformationService.kt$Transformation$return</ID>
    <ID>MaxLineLength:CoordinateTransformationService.kt$Transformation$}</ID>
    <ID>MaxLineLength:CoordinateTransformationService.kt$Transformation.Companion$Transformation(sourceSrid, targetSrid, kkjToEtrsTriangulationNetwork = null, etrsToKkjTriangulationNetwork = null)</ID>
    <ID>MaxLineLength:CoordinateTransformationService.kt$Transformation.Companion$fun</ID>
    <ID>MaxLineLength:CsvFile.kt$CsvFile$private val expectedColumns: List&lt;String&gt; by lazy { type.java.enumConstants.map { value -&gt; value.name.lowercase() } }</ID>
    <ID>MaxLineLength:CsvMigration.kt$CsvMigration$logger.info("Not running CSV import: version=$version description=$description enabled=$importEnabled filesExist=${fileList.map { f -&gt; "${f.file.absolutePath}:${f.file.exists()}" }}")</ID>
    <ID>MaxLineLength:DraftableObjectDao.kt$DraftableDaoBase$"Requested publication versions with duplicate ids: duplicated=${ids.size - distinctIds.size} requested=$ids"</ID>
    <ID>MaxLineLength:DraftableObjectService.kt$DraftableObjectService$"Updated version isn't the next one: a concurrent change may have been overwritten: " + "id=$id previous=$previousVersion updated=$response"</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.DIRECTION_END)) { it.end.directionGrads.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.DIRECTION_START)) { it.start.directionGrads.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.LOCATION_END_E)) { it.end.coordinate.roundedX.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.LOCATION_END_N)) { it.end.coordinate.roundedY.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.LOCATION_START_E)) { it.start.coordinate.roundedX.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.LOCATION_START_N)) { it.start.coordinate.roundedY.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListing.kt$CsvEntry(translateElementListingHeader(ElementListingHeader.RADIUS_START)) { it.start.radiusMeters?.toPlainString() }</ID>
    <ID>MaxLineLength:ElementListingTest.kt$ElementListingTest$else</ID>
    <ID>MaxLineLength:ElementListingTest.kt$ElementListingTest$getElementListingTypes(plan, GeometryElementType.LINE, GeometryElementType.CURVE, GeometryElementType.CLOTHOID)</ID>
    <ID>MaxLineLength:ElementListingTest.kt$ElementListingTest$if</ID>
    <ID>MaxLineLength:ElementListingTest.kt$ElementListingTest$segment(Point(20.0, 2.0), Point(25.0, 2.5), source = PLAN, sourceId = alignment.elements[1].id, switchId = IntId(1))</ID>
    <ID>MaxLineLength:Elements.kt$logger.info("Click double=$doubleClick canvas [${element.rect.width}x${element.rect.height}], center offset ($offSetX,$offSetY)")</ID>
    <ID>MaxLineLength:ErrorHandling.kt$is ConversionFailedException -&gt; "Conversion failed for value \"${exception.value}\": [${exception.sourceType?.type?.simpleName}] -&gt; [${exception.targetType.type.simpleName}]"</ID>
    <ID>MaxLineLength:ErrorHandling.kt$is MissingServletRequestParameterException -&gt; "Missing parameter: ${exception.parameterName} of type ${exception.parameterType}"</ID>
    <ID>MaxLineLength:FakeProjektiVelho.kt$"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"</ID>
    <ID>MaxLineLength:FormGroup.kt$E2EFormGroup$By.xpath(".//div[@class='formgroup__field' and div[text() = '$fieldName']]/div[@class='formgroup__edit-icon']/div")</ID>
    <ID>MaxLineLength:FormGroup.kt$E2EFormGroup$childElement(By.xpath(".//div[@class='formgroup__field' and div[text() = '$fieldName']]/div[@class='formgroup__field-value']"))</ID>
    <ID>MaxLineLength:FormLayout.kt$E2EFormLayout$".//div[contains(@class, 'field-layout') and div[contains(text(), '$fieldName')]]/div[@class='field-layout__value']"</ID>
    <ID>MaxLineLength:FormLayout.kt$E2EFormLayout$".//div[contains(@class, 'field-layout') and div[contains(text(), '$fieldName')]]/div[@class='field-layout__value']//input"</ID>
    <ID>MaxLineLength:FrontPageTestUI.kt$FrontPageTestUI$trackNumberDao.insert(createTrackLayoutTrackNumber("original name").copy(externalId = Oid("1.2.3.4.5"))).rowVersion</ID>
    <ID>MaxLineLength:FrozenMigrationsTest.kt$FrozenMigrationsTest$MigrationFile(fileName = "V10.04.02__common_inserts_for_n60_n2000_triangle_corner_point_table.sql", checksum = -1896455933)</ID>
    <ID>MaxLineLength:FrozenMigrationsTest.kt$FrozenMigrationsTest$MigrationFile(fileName = "V10.04.03__common_inserts_for_n60_n2000_triangulation_network_table.sql", checksum = 1910613803)</ID>
    <ID>MaxLineLength:FrozenMigrationsTest.kt$FrozenMigrationsTest$MigrationFile(fileName = "V10.05.02__common_inserts_for_kkj_etrs_triangle_corner_point_table.sql", checksum = -294904538)</ID>
    <ID>MaxLineLength:FrozenMigrationsTest.kt$FrozenMigrationsTest$MigrationFile(fileName = "V10.05.03__common_inserts_for_kkj_etrs_triangulation_network.sql", checksum = 571127275)</ID>
    <ID>MaxLineLength:Geocoding.kt$// Generated connection segments can have a sideways offset, but the real line doesn't change direction</ID>
    <ID>MaxLineLength:GeocodingController.kt$GeocodingController$return toResponse(locationTrackAndAlignment?.let { (locationTrack, alignment) -&gt; geocodingService.getTrackLocation(locationTrack, alignment, address, OFFICIAL) })</ID>
    <ID>MaxLineLength:GeocodingDao.kt$GeocodingDao$versions.referenceLines.find { v -&gt; referenceLineDao.fetch(v.validatedAssetVersion).trackNumberId == trackNumberId }?.validatedAssetVersion</ID>
    <ID>MaxLineLength:GeocodingDaoIT.kt$GeocodingDaoIT$kmPostVersions = listOf(kmPostOneDraftVersion, kmPostTwoOnlyDraftVersion, kmPostThreeOnlyOfficialVersion)</ID>
    <ID>MaxLineLength:GeocodingDaoIT.kt$GeocodingDaoIT$officialKey.copy(kmPostVersions = listOf(kmPostOneDraftVersion, kmPostTwoOnlyDraftVersion, kmPostThreeOnlyOfficialVersion))</ID>
    <ID>MaxLineLength:GeocodingDaoIT.kt$GeocodingDaoIT$val rlOfficialVersion = referenceLineDao.insert(referenceLine(tnId).copy(alignmentVersion = alignmentVersion)).rowVersion</ID>
    <ID>MaxLineLength:GeocodingService.kt$GeocodingService$geocodingDao.getLayoutGeocodingContextCacheKey(publicationState, trackNumberId)?.let(geocodingCacheService::getGeocodingContext)</ID>
    <ID>MaxLineLength:GeocodingService.kt$GeocodingService$geocodingDao.getLayoutGeocodingContextCacheKey(trackNumberId, moment)?.let(geocodingCacheService::getGeocodingContext)</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$"Projections should be in increasing order: index=$index prev=${projections[index-1].address} next=${proj.address}"</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$assertEquals(listOf(1, 2, 3, 4), getSublistForRangeInOrderedList(listOf(1, 2, 3, 4, 5), (0..4), Integer::compare))</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$assertEquals(listOf(1, 2, 3, 4), getSublistForRangeInOrderedList(listOf(1, 2, 3, 4, 5), (1..4), Integer::compare))</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$assertEquals(listOf(2, 3, 4, 5), getSublistForRangeInOrderedList(listOf(1, 2, 3, 4, 5), (2..5), Integer::compare))</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$assertEquals(listOf(2, 3, 4, 5), getSublistForRangeInOrderedList(listOf(1, 2, 3, 4, 5), (2..6), Integer::compare))</ID>
    <ID>MaxLineLength:GeocodingTest.kt$GeocodingTest$println("segment=${segment.id} start=${segment.startM} end=${segment.endM} startDist=$startResult endDist=$endResult")</ID>
    <ID>MaxLineLength:GeometryController.kt$GeometryController$fun</ID>
    <ID>MaxLineLength:GeometryDao.kt$GeometryDao$"Backend hash calculation should match the automatic DB-generated: file=${file.name} db=$hash backend=${file.hash}"</ID>
    <ID>MaxLineLength:GeometryDao.kt$GeometryDao$elevationMeasurementMethod = rs.getEnumOrNull&lt;ElevationMeasurementMethod&gt;("elevation_measurement_method")</ID>
    <ID>MaxLineLength:GeometryDao.kt$GeometryDao$fun</ID>
    <ID>MaxLineLength:GeometryDao.kt$GeometryDao$private</ID>
    <ID>MaxLineLength:GeometryElement.kt$BiquadraticParabola$throw IllegalArgumentException("Biquadratic parabola is not supported between curves (only on of start- and end-radius can be given).")</ID>
    <ID>MaxLineLength:GeometryElement.kt$GeometrySpiral$protected val segmentStartRadius: Double? by lazy { if (isSteepening) radiusStart?.toDouble() else radiusEnd?.toDouble() }</ID>
    <ID>MaxLineLength:GeometryElementListPage.kt$E2EDataProductElementListItem$locationStartE = getColumnContent("data-products.element-list.element-list-table.location-start-e", columns, headers)</ID>
    <ID>MaxLineLength:GeometryElementListPage.kt$E2EDataProductLayoutElementList$override fun getRowContent(row: WebElement)</ID>
    <ID>MaxLineLength:GeometryElementListPage.kt$E2EDataProductLayoutElementListItem$val locationTrack = getColumnContent("data-products.element-list.element-list-table.location-track", columns, headers)</ID>
    <ID>MaxLineLength:GeometryElementListPage.kt$E2EDataProductLayoutElementListPage$val downloadUrl: String get() = childElement(byQaId("location-track-element-list-csv-download")).getAttribute("href")</ID>
    <ID>MaxLineLength:GeometryElementListPage.kt$E2EDataProductPlanElementList$override fun getRowContent(row: WebElement)</ID>
    <ID>MaxLineLength:GeometryElementTest.kt$GeometryElementTest$"Step $dist: X-offset=abs(${current.x}) should be less than ${element.length.toDouble()}*$portion=$maxDist"</ID>
    <ID>MaxLineLength:GeometryElementTest.kt$GeometryElementTest$"Step $dist: Y-offset=abs(${current.y}) should be less than ${element.length.toDouble()}*$portion=$maxDist"</ID>
    <ID>MaxLineLength:GeometryPlan.kt$GeometryPlan$*</ID>
    <ID>MaxLineLength:GeometryProfile.kt$else</ID>
    <ID>MaxLineLength:GeometryProfile.kt$if</ID>
    <ID>MaxLineLength:GeometryProfile.kt$val connectSegment = createLinearIfNeeded(intersection.description, start, tangents.first, startValid)</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$+</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$.</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$?:</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$GeometryPlanSortField.DECISION_PHASE -&gt; stringComparator { h -&gt; localization.t("enum.plan-decision.${h.decisionPhase?.name}") }</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$GeometryPlanSortField.PLAN_PHASE -&gt; stringComparator { h -&gt; localization.t("enum.plan-phase.${h.planPhase?.name}") }</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$geocodingContext.referencePoints.indexOfFirst { referencePoint -&gt; referencePoint.kmNumber == addressOfStartDistance.kmNumber }..geocodingContext.referencePoints.indexOfFirst { referencePoint -&gt; referencePoint.kmNumber == addressOfEndDistance.kmNumber }</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$planLayoutCache.getPlanLayout(planVersion).first?.alignments?.find { alignment -&gt; alignment.id == planAlignmentId }</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$segmentIndex != null || i == 0 || ((trackMeterInKm - allTicks[i - 1].first &gt;= minTickSpace) &amp;&amp; (i == allTicks.lastIndex || allTicks[i + 1].first - trackMeterInKm &gt;= minTickSpace))</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService$verticalGeometryListing.copy(trackNumber = trackNumberAndGeocodingContextCache[locationTrack.trackNumberId]?.first?.number)</ID>
    <ID>MaxLineLength:GeometryService.kt$GeometryService${ locationTrack -&gt; trackNumberAndGeocodingContextCache[locationTrack.trackNumberId]?.first?.number }</ID>
    <ID>MaxLineLength:GeometryService.kt$else</ID>
    <ID>MaxLineLength:GeometryService.kt$if</ID>
    <ID>MaxLineLength:GeometryServiceIT.kt$GeometryServiceIT$// profile originally inspired by geometry alignment 2466 in order to make the numbers plausible;</ID>
    <ID>MaxLineLength:GeometryValidation.kt$CollectionError("multiple-start-km-posts", VALIDATION_KM_POST, VALIDATION_ERROR, firstKmPost?.kmNumber?.toString())</ID>
    <ID>MaxLineLength:GeometryValidation.kt$CollectionError("sta-ahead-not-negative", VALIDATION_KM_POST, VALIDATION_ERROR, firstKmPost?.staAhead?.toString())</ID>
    <ID>MaxLineLength:GeometryValidation.kt$ProfileError$constructor</ID>
    <ID>MaxLineLength:GeometryValidation.kt$val referenceLineAlignments = alignments.filter { alignment -&gt; alignment.featureTypeCode == REFERENCE_LINE_TYPE_CODE }</ID>
    <ID>MaxLineLength:GeometryValidation.kt$value = "${roundTo3Decimals(previous.endDirectionRads)} &lt;&gt; ${roundTo3Decimals(element.startDirectionRads)}"</ID>
    <ID>MaxLineLength:GeometryValidation.kt$value = "${roundTo3Decimals(radsToDegrees(previous.endAngle))}&lt;&gt;${roundTo3Decimals(radsToDegrees(segment.startAngle))}"</ID>
    <ID>MaxLineLength:InfoBox.kt$E2EInfoBox$".//div[@class='infobox__field-label' and text() = '$fieldName']/div[@class='infobox__field-value' and (text() != '' or ./*[text() != ''])]"</ID>
    <ID>MaxLineLength:InfoBox.kt$E2EInfoBox$".//div[div[@class='infobox__field-label' and contains(text(), '$fieldName')]]/div[@class='infobox__field-value']"</ID>
    <ID>MaxLineLength:InfraModelConversion.kt$// Plans include geo-angles (0=north, clockwise), so turn them into mathematical ones (0=positive-X, counter-clockwise)</ID>
    <ID>MaxLineLength:InfraModelConversion.kt$logger.warn("Failed to parse profile: name=${formatForLog(profAlign.name)} elements=${profAlign.elements} cause=$ex")</ID>
    <ID>MaxLineLength:InfraModelParsingIT.kt$InfraModelParsingIT$assertEquals(8, allCantPoints.filter { cp -&gt; cp.transitionType == CantTransitionType.BIQUADRATIC_PARABOLA }.size)</ID>
    <ID>MaxLineLength:InfraModelService.kt$InfraModelService$// Nullable fields that do not contain a default parameter via the elvis-operator are considered to be assignable</ID>
    <ID>MaxLineLength:InfraModelService.kt$InfraModelService$val</ID>
    <ID>MaxLineLength:KeyUtilsTest.kt$KeyUtilsTest$"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDdfHVQyiLKz8Zb5pVxbKaLJPs6jN287bMrc2NBDmFfbHspsPg2kFYWFlQns6NpwzZF7HaF+WZNeZfeVBjYDzJA1os62JroNF6+cYrpIsIpjr0jdA0am19Kai3+MYt3d1qi4ILp2I/4LX/axiFnK4Gfe430jN7o4Ud0hFl6vRbbWfr9D3OOxHjLRprf2N3gPZE/D3m2HAwAUy1tX1My88ItFlDynmGQm/bpywTOgxEeeXRmsZ6FoigNgNpMh5wp/Sdf6rMC0XtxbDng/PgzWhA5i7Z6R0VNGds06zuadsF/izqtV92iveCb/BDGAq3mYXjvWUw/MD6A3Ddb1qfgabq9AgMBAAECggEAZxEAgqzdjeUsGB3wEw0NXxjBc9iTYtR2GNUkLeTkOQSBN8BrcPCvrq2LUcJNW+0Ed3t3GBcbnRflLQeTXA+OQg/UUHj1dPLR1+t8Scrr8WzD5Rie9G+y4y0P5AboMJqw6bRyFyG4tTNvGL40Uw8yzaUwRMm8/T/AAZ+JCA2v8jhJ3i4yHGiiHUnjY1CRLaUDpkycxRaGgA9q7JnDzfp8CCh88pFFr5nKEGWhoJq6noNm/rh9OpYgXx9byylTE9lGq8GQtlfRo1kQP9h1lsZztQ4rP+MKQhCOBsyQrCJn1GIjmv1utqxTipcgukQxtIzykbSXBsykufblozFjfikeIQKBgQD/wa2G9I1PuBmmY7NVj8cuPbMqYGGOshzeRuz/aYuOo7ajw6i6YgutP3Qvq0Ix99cvLru/tcDbR9+xfmKwoA/uSK1wOazusikskrnA8phJUkpeEnjumGhtqWRpXvM0P5MU3oFj+poSVjoZYScLgbHnF1pS/Fm0fzI17rr2CAJeKQKBgQDdsm3zZY1OcmRK8beUiNqAsXY0pMQ0gWjTdeJYbCtif0Vkpem0tMRm9bbA8Gora1DKlfBHuzopdq8HBbi/4PSY4so4zkJB3EZnmGDEthEF8KZEXi8KGU7v6/0ViCcjujCsvqdAZgsGKYfRDdXRPm17Chd2Rg5KFmJhcGgrTCFidQKBgADZyhP62EV9nUg6aKxOMCFtPx1S+MAaw5HRtpQa68XrsX3V9se378YBwgcukKfN5T9Y7nLyzdNs58eVXgqsXaEzSLBo4LRij1SAoHGN3QfRaEHr2c8hXqeOurDHChQQahLVsqR8fuq0srjG4/Rb2BWmtDw2bq31Blu7kY+j8y4RAoGBAJkWaDRl0LD17umNho5L/k5VvOFXUaFMJ122DomukDrg1cNNilddaC4MyJjsqvO2lECATz7JO718FhrMSao+JckY+jlFvJ0MBZXttAzCCHlIlxeozeS0WzzzgX0H2rciEBCJSqb+j+g+b2ndmuN1r1YCPvdOIvnoASF15IjZdkgtAoGASUm2gEr3mtoRFh1Q0xJwRNM3hV0dvderUv2k3Hyv+qM/3LValLimy7NSwSyrIkIB2NoXW/zsWTXrcQ8jkpmvACnXAdkVcYyidxeRzzshQjioQaIO8IY3Wtc8Jhnq7Qi8g0FPn2Hc/Q8eee0M5+gf68f/N9z88R3I1bsSIwrvU6U="</ID>
    <ID>MaxLineLength:KilometerLengthsListPage.kt$LocationTrackKilometerLengthsList$override fun getRowContent(row: WebElement)</ID>
    <ID>MaxLineLength:KkjEtrsTransformation.kt$KkjTm35finTriangle$toJtsPolygon(listOf(corner1, corner2, corner3, corner1), crs(KKJ3_YKJ))</ID>
    <ID>MaxLineLength:KkjEtrsTransformation.kt$fun</ID>
    <ID>MaxLineLength:LayoutAlignmentDao.kt$LayoutAlignmentDao$if (alignment.id is IntId) alignment.id else throw IllegalArgumentException("Cannot update an alignment that isn't in DB already")</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$LayoutAlignment$"Alignment segment m-calculation should be continuous: " + "alignment=$id segment=$index prevEnd=${previous.startM + previous.length} start=${segment.startM}"</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$LayoutSegment$"Slice m-range ends must be within segment (with snapDistance tolerance):" + " range=$mRange snapDistance=$snapDistance segment=${startM..endM}"</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$LayoutSegmentMetadata$alignmentName == null &amp;&amp; planTime == null &amp;&amp; measurementMethod == null &amp;&amp; fileName == null &amp;&amp; originalSrid == null</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$LayoutSegmentMetadata$alignmentName == other.alignmentName &amp;&amp; planTime == other.planTime &amp;&amp; measurementMethod == other.measurementMethod &amp;&amp; fileName == other.fileName &amp;&amp; originalSrid == other.originalSrid</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$SegmentGeometry$"Segment geometry m-values should be increasing:" + " id=$id ${index - 1}=${points[index - 1].m} $index=${point.m}"</ID>
    <ID>MaxLineLength:LayoutGeometry.kt$SegmentGeometry$"There should be no duplicate points in segment geometry:" + " id=$id ${index - 1}=${points[index - 1]} ${index}=${points[index]}"</ID>
    <ID>MaxLineLength:LayoutKmPostService.kt$LayoutKmPostService$fun</ID>
    <ID>MaxLineLength:LayoutSwitchDao.kt$LayoutSwitchDao$"Joint piece arrays should be the same size: numbers=${numbers.size} xValues=${xValues.size} yValues=${yValues.size} accuracies=${accuracies.size}"</ID>
    <ID>MaxLineLength:LayoutSwitchDao.kt$LayoutSwitchDao$"geometry_switch_id" to if (updatedItem.sourceId is IntId&lt;GeometrySwitch&gt;) updatedItem.sourceId.intValue else null</ID>
    <ID>MaxLineLength:LayoutTrackNumberService.kt$LayoutTrackNumberService$checkNotNull(distance) { "Couldn't calculated distance for km post, id=${kmPost.id} location=${kmPost.location}" }</ID>
    <ID>MaxLineLength:LayoutTrackNumberService.kt$LayoutTrackNumberService$if (trackNumber.getDraftType() != DraftType.NEW_DRAFT) throw DeletingFailureException("Trying to delete non-draft Track Number")</ID>
    <ID>MaxLineLength:LayoutTrackNumberService.kt$LayoutTrackNumberService$trackLayoutTrackNumber.exists &amp;&amp; trackLayoutTrackNumber.number.toString().replace(" ", " ").contains(term, true)</ID>
    <ID>MaxLineLength:LayoutTrackNumberService.kt$else</ID>
    <ID>MaxLineLength:LayoutTrackNumberService.kt$if</ID>
    <ID>MaxLineLength:LayoutTrackNumberServiceIT.kt$LayoutTrackNumberServiceIT$fun</ID>
    <ID>MaxLineLength:LinkingService.kt$LinkingService$"Save LocationTrack linking: " + "geometryAlignmentId=${parameters.geometryInterval.alignmentId} " + "locationTrackId=$locationTrackId"</ID>
    <ID>MaxLineLength:LinkingService.kt$LinkingService$"Save ReferenceLine linking: " + "geometryAlignmentId=${parameters.geometryInterval.alignmentId} " + "referenceLineId=$referenceLineId"</ID>
    <ID>MaxLineLength:LinkingService.kt$LinkingService$"Save empty LocationTrack linking: " + "geometryAlignmentId=${parameters.geometryInterval.alignmentId} " + "locationTrackId=$locationTrackId"</ID>
    <ID>MaxLineLength:LinkingService.kt$LinkingService$"Save empty ReferenceLine linking: " + "geometryAlignmentId=${parameters.geometryInterval.alignmentId} " + "referenceLineId=$referenceLineId"</ID>
    <ID>MaxLineLength:LinkingTestUI.kt$LinkingTestUI$private</ID>
    <ID>MaxLineLength:LinkingTestUI.kt$LinkingTestUI$testGeometryPlanService.buildPlan(trackNumberId).alignment("extending track", Point(0.0, 0.0), Point(4.0, 6.0), Point(4.0, 2.0))</ID>
    <ID>MaxLineLength:LinkingTestUI.kt$LinkingTestUI$testGeometryPlanService.buildPlan(trackNumberId).alignment("foo bar", Point(4.0, 4.0), Point(14.0, 14.0), Point(58.0, 51.0))</ID>
    <ID>MaxLineLength:LinkingTestUI.kt$LinkingTestUI$val</ID>
    <ID>MaxLineLength:LocationTrackService.kt$LocationTrackService$DescriptionSuffixType.SWITCH_TO_BUFFER -&gt; FreeText("${locationTrack.descriptionBase} ${startSwitchName ?: endSwitchName ?: "???"} - $BUFFER_TRANSLATION")</ID>
    <ID>MaxLineLength:LocationTrackService.kt$LocationTrackService$DescriptionSuffixType.SWITCH_TO_SWITCH -&gt; FreeText("${locationTrack.descriptionBase} ${startSwitchName ?: "???"} - ${endSwitchName ?: "???"}")</ID>
    <ID>MaxLineLength:LoggerExternal.kt$info("Response: status=${res.status} time=${timeMs}ms${timingString} contentType=${res.contentType} ip=$requestIp request=${req.method}:${req.requestURL}")</ID>
    <ID>MaxLineLength:LoggerExternal.kt$info("Sending API request to external service: ${request.logPrefix()} method=${request.method()} url=${request.url()}")</ID>
    <ID>MaxLineLength:PVApi.kt$PVAccessToken$logger.warn("ProjektiVelho API token does not have expiry time available: defaulting to now()+expiresIn")</ID>
    <ID>MaxLineLength:PVApi.kt$PVAccessToken$logger.warn("ProjektiVelho API token is not issued in 1 minute. The server time might differ from the client.")</ID>
    <ID>MaxLineLength:PVApiSerializationTest.kt$PVApiSerializationTest$val json = """{"tila":"$materialState","kuvaus":"$description","laji":"$materialCategory","dokumenttityyppi":"$documentType","ryhma":"$materialGroup","tekniikka-alat":[],"sisaltaa-henkilotietoja":null}"""</ID>
    <ID>MaxLineLength:PVApiSerializationTest.kt$PVApiSerializationTest$val json = """{"tila":"$state","hakutunniste":"$searchId","alkuaika":"$startTime","hakutunniste-voimassa":$validFor}"""</ID>
    <ID>MaxLineLength:PVIntegrationService.kt$PVIntegrationService$@Scheduled(initialDelayString="\${geoviite.projektivelho.result-poll.initial}", fixedRateString="\${geoviite.projektivelho.result-poll.rate}")</ID>
    <ID>MaxLineLength:PVIntegrationService.kt$PVIntegrationService$@Scheduled(initialDelayString="\${geoviite.projektivelho.search-poll.initial}", fixedRateString="\${geoviite.projektivelho.search-poll.rate}")</ID>
    <ID>MaxLineLength:PlanLayoutCache.kt$PlanLayoutCache$logger.warn("Not converting plan to layout as bounds are outside height triangulation network: id=${geometryPlan.id} file=${geometryPlan.fileName}")</ID>
    <ID>MaxLineLength:PlanLayoutCache.kt$PlanLayoutCache$logger.warn("Not converting plan to layout as bounds could not be resolved: id=${geometryPlan.id} file=${geometryPlan.fileName}")</ID>
    <ID>MaxLineLength:PlanLayoutCache.kt$PlanLayoutCache$logger.warn("Not converting plan to layout as there is no SRID: id=${geometryPlan.id} file=${geometryPlan.fileName}")</ID>
    <ID>MaxLineLength:PlanLayoutTransformation.kt$*</ID>
    <ID>MaxLineLength:Point.kt$* Calculates the point received by rotating the given point around the reference point, with the given delta angle (radians)</ID>
    <ID>MaxLineLength:Point.kt$* Returns the direction angle (radians, 0=direction of positive x, increasing counter-clockwise) between the given points</ID>
    <ID>MaxLineLength:Point.kt$* Returns the direction angle (radians, 0=direction of positive x, increasing counter-clockwise) from origin to the given point</ID>
    <ID>MaxLineLength:Point.kt$IPoint$* Non-exact coordinate equality check, allowing for small deviations in the value and still considers the point same.</ID>
    <ID>MaxLineLength:PublicationDao.kt$PublicationDao$.</ID>
    <ID>MaxLineLength:PublicationDao.kt$PublicationDao$fun</ID>
    <ID>MaxLineLength:PublicationDaoIT.kt$PublicationDaoIT$private</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$.</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$drafts.any { (_, draft) -&gt; draft.name == switch.name &amp;&amp; draft.id != switch.id &amp;&amp; draft.stateCategory != LayoutStateCategory.NOT_EXISTING }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$drafts.any { (_, draft) -&gt; draft.number == trackNumber.number &amp;&amp; draft.id != trackNumber.id &amp;&amp; draft.state != LayoutState.DELETED }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$getLengthChangedRemarkOrNull(translation, locationTrackChanges.length.old, locationTrackChanges.length.new)</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$getPointMovedRemarkOrNull(translation, locationTrackChanges.endPoint.old, locationTrackChanges.endPoint.new)</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$getPointMovedRemarkOrNull(translation, locationTrackChanges.startPoint.old, locationTrackChanges.startPoint.new)</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$private</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$publicationDetails to (previousPublication?.publicationTime ?: publicationDetails.publicationTime.minusMillis(1))</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$publicationLocationTrackChanges.getOrElse(lt.version.id) { error("Location track changes not found") }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$publicationReferenceLineChanges.getOrElse(rl.version.id) { error("Reference line changes not found") }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$publicationTrackNumberChanges.any { trackNumberInPublication -&gt; trackNumberInPublication.key == lt.trackNumberId }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$ratkoPushTime = if (publication.ratkoPushStatus == RatkoPushStatus.SUCCESSFUL) publication.ratkoPushTime else null</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$remark = getAddressMovedRemarkOrNull(translation, oldStartPointAndM?.address, newStartPointAndM?.address)</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$return (trackNumbers + referenceLines + locationTracks + switches + kmPosts + calculatedLocationTracks + calculatedSwitches)</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$return fieldErrors + referenceErrors + switchErrorsSegments + switchErrorsTopological + duplicateErrors + alignmentErrors + geocodingErrors + duplicateNameErrors</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$trackNumberNamesCache.findLast { it.id == kp.trackNumberId &amp;&amp; it.changeTime &lt;= publication.publicationTime }?.number</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$trackNumberNamesCache.findLast { it.id == lt.trackNumberId &amp;&amp; it.changeTime &lt;= publication.publicationTime }?.number</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$trackNumberNamesCache.findLast { it.id == rl.trackNumberId &amp;&amp; it.changeTime &lt;= publication.publicationTime }?.number</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService$val geocodingContextCache = ConcurrentHashMap&lt;Instant, MutableMap&lt;IntId&lt;TrackLayoutTrackNumber&gt;, Optional&lt;GeocodingContext&gt;&gt;&gt;()</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService${ trackNumberCache.findLast { it.id == changes.trackNumberId.new &amp;&amp; it.changeTime &lt;= publicationTime }?.number }</ID>
    <ID>MaxLineLength:PublicationService.kt$PublicationService${ trackNumberCache.findLast { it.id == locationTrackChanges.trackNumberId.new &amp;&amp; it.changeTime &lt;= publicationTime }?.number }</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$alignmentVersion = alignmentDao.insert(a.copy(segments = listOf(a.segments[0].copy(switchId = switch.id))))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$e.localizationKey.contains("validation.layout.switch.track-linkage.front-joint-not-connected")</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$locationTrack(trackNumberId, topologyStartSwitch = TopologyLocationTrackSwitch(switchUnlinkedFromTopology.id, JointNumber(1)))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$mapOf("locationTracks" to "3 (${locationTrack2.name}, ${locationTrack3.name}), 4 (${locationTrack2.name}, ${locationTrack3.name})")</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$switchDao.fetch(originalSwitchReplacedWithNewSameName.rowVersion).copy(stateCategory = LayoutStateCategory.NOT_EXISTING)</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$val newSwitchReplacingOldWithSameName = switchService.saveDraft(switch(name = "sw-replaced-with-new-same-name", externalId = "1.1.1.1.9"))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$val originalSwitchReplacedWithNewSameName = switchDao.insert(switch(name = "sw-replaced-with-new-same-name", externalId = "1.1.1.1.8"))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$val switchAddedToTopologyStart = switchDao.insert(switch(name = "sw-added-to-topo-start", externalId = "1.1.1.1.3"))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$val switchUnlinkedFromAlignment = switchDao.insert(switch(name = "sw-unlinked-from-alignment", externalId = "1.1.1.1.2"))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$val switchUnlinkedFromTopology = switchDao.insert(switch(name = "sw-unlinked-from-topology", externalId = "1.1.1.1.1"))</ID>
    <ID>MaxLineLength:PublicationServiceIT.kt$PublicationServiceIT$validation.validatedAsPublicationUnit.switches.find { it.name == SwitchName("SW") }?.errors?.filter { it.localizationKey.toString() == "validation.layout.switch.duplicate-name-official" }</ID>
    <ID>MaxLineLength:PublicationUtils.kt$it.changedKmNumbers.joinToString(", ") { range -&gt; "${range.min}${if (range.min != range.max) "-${range.max}" else ""}" }</ID>
    <ID>MaxLineLength:PublicationUtils.kt$val newIndexByGeometryId = new.segments.mapIndexed { i, s -&gt; i to s }.associate { (index, segment) -&gt; segment.geometry.id to index }</ID>
    <ID>MaxLineLength:PublicationValidation.kt$"$VALIDATION_SWITCH.location-track.not-published" to LocalizationParams("locationTrack" to locationTrack.name)</ID>
    <ID>MaxLineLength:PublicationValidation.kt$"$VALIDATION_SWITCH.location-track.reference-deleted" to LocalizationParams("locationTracks" to existingNames)</ID>
    <ID>MaxLineLength:PublicationValidation.kt$"${allAddresses[range.start].formatDropDecimals()}..${allAddresses[range.endInclusive - 1].formatDropDecimals()}"</ID>
    <ID>MaxLineLength:PublicationValidation.kt$if</ID>
    <ID>MaxLineLength:PublicationValidation.kt$if (segment.switchId == switch.id &amp;&amp; (segment.startJointNumber == jointNumber || segment.endJointNumber == jointNumber)) i else null</ID>
    <ID>MaxLineLength:PublicationValidation.kt$jointLinkedIndexRange.isNotEmpty() &amp;&amp; jointLinkedIndexRange.first() &gt; 0 &amp;&amp; jointLinkedIndexRange.last() &lt; alignment.segments.lastIndex</ID>
    <ID>MaxLineLength:PublicationValidation.kt$locationTrack.topologyEndSwitch?.switchId == switchId &amp;&amp; locationTrack.topologyEndSwitch.jointNumber == connectivityType.frontJoint</ID>
    <ID>MaxLineLength:PublicationValidation.kt$locationTrack.topologyStartSwitch?.switchId == switchId &amp;&amp; locationTrack.topologyStartSwitch.jointNumber == connectivityType.frontJoint</ID>
    <ID>MaxLineLength:RatkoCommonModel.kt$RatkoGeometry$coordinates = transformNonKKJCoordinate(LAYOUT_SRID, RATKO_SRID, Point(point.x, point.y)).let { listOf(it.x, it.y) }</ID>
    <ID>MaxLineLength:RatkoLocationTrackService.kt$RatkoLocationTrackService$if</ID>
    <ID>MaxLineLength:RatkoLocationTrackService.kt$RatkoLocationTrackService$requireNotNull(layoutLocationTrack.externalId) { "OID required for location track, lt=${layoutLocationTrack.id}" }</ID>
    <ID>MaxLineLength:RatkoService.kt$RatkoService$"No location track exists with id ${locationTrackChange.locationTrackId} and timestamp $latestPublicationMoment"</ID>
    <ID>MaxLineLength:RatkoServiceIT.kt$RatkoServiceIT$private</ID>
    <ID>MaxLineLength:RatkoServiceIT.kt$RatkoServiceIT$switchLocations.map { push -&gt; push.map { location -&gt; location.nodecollection.nodes.map { n -&gt; n.nodeType } } }</ID>
    <ID>MaxLineLength:RatkoServiceIT.kt$RatkoServiceIT$switchLocations[0].map { location -&gt; location.nodecollection.nodes.map { n -&gt; n.point.locationtrack.toString() } }</ID>
    <ID>MaxLineLength:RatkoServiceIT.kt$RatkoServiceIT$switchLocations[1].map { location -&gt; location.nodecollection.nodes.map { n -&gt; n.point.locationtrack.toString() } }</ID>
    <ID>MaxLineLength:RatkoServiceIT.kt$RatkoServiceIT$switchService.saveDraft(officialSwitch.copy(joints = officialSwitch.joints.map { j -&gt; j.copy(locationAccuracy = LocationAccuracy.GEOMETRY_CALCULATED) }))</ID>
    <ID>MaxLineLength:ReferenceLineService.kt$ReferenceLineService$fun</ID>
    <ID>MaxLineLength:RequestFilter.kt$RequestFilter$throw ApiUnauthorizedException("JWT access token expired.", localizedMessageKey="error.unauthorized.token-expired")</ID>
    <ID>MaxLineLength:ResultSetExternal.kt$fun ResultSet.getFreeTextWithNewLinesOrNull(name: String): FreeTextWithNewLines?</ID>
    <ID>MaxLineLength:SelectionPanel.kt$E2ESelectionPanel$.</ID>
    <ID>MaxLineLength:StringUtils.kt$fun normalizeLinebreaksToUnixFormat(input: FreeTextWithNewLines)</ID>
    <ID>MaxLineLength:StringUtilsTest.kt$"Legacy linebreak modification doesn't result \r in additional linebreaks\r\r\n" to "Legacy linebreak modification doesn't result \n in additional linebreaks\n\n"</ID>
    <ID>MaxLineLength:StringUtilsTest.kt$"\r\nMultiple \nlinebreaks are \r\n\r\ncorrectly modified to unix style\r" to "\nMultiple \nlinebreaks are \n\ncorrectly modified to unix style\n"</ID>
    <ID>MaxLineLength:StringUtilsTest.kt$StringUtilsTest$assertEquals(expectedResult, modifiedString,"Test failed with expected: $expectedResult, modified: $modifiedString")</ID>
    <ID>MaxLineLength:SuggestedSwitchTest.kt$SuggestedSwitchTest$fail("Didn't found a match from joint ${jointNumber.intValue}: alignmentId $alignmentId, segmentIndex $segmentIndex, $endPoint")</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$?:</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$"Invalid searchIndexRange: $searchIndexRange contains adjacent indices outside of layoutSegments (${layoutSegments.indices})"</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$"Invalid searchIndexRange: $searchIndexRange contains indices outside of layoutSegments (${layoutSegments.indices})"</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$(listDraftTracksNearArea(originalArea) + listDraftTracksNearArea(updatedArea)).distinctBy { t -&gt; t.first.id }</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$// Couldn't snap, possibly due to too much overlap or adjacent switch segment(s) already contained another switch.</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$if</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$layoutSegmentHasExistingSwitch &amp;&amp; referencedLayoutSegment.switchId != linkingParameters.layoutSwitchId</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$logger.info("Could not find the edge segment for the switch=${existingSwitchId} with a free adjacent segment, searchIndexRange was $searchIndexRange")</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$logger.info("Expected to find switch $existingSwitchId from segment, but found ${segment.switchId} (at least one switch should be overridden from the two adjacent switches)")</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$val distanceToPreviousSwitchLineEnd = indexedExistingSwitchEndSegment.value.endM - switchLinkingSegment.m</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$val distanceToPreviousSwitchLineStart = switchLinkingSegment.m - indexedExistingSwitchStartSegment.value.startM</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$SwitchLinkingService$val hasAdjacentLayoutSegment = indexedExistingSwitchEndSegment.index &lt; layoutAlignment.segments.lastIndex</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$if</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$jointMatches.filter { it.matchType == SuggestedSwitchJointMatchType.START || it.matchType == SuggestedSwitchJointMatchType.END }</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$presentationJoint != frontJoint &amp;&amp; presentationJoint != backJoint &amp;&amp; alignment.jointNumbers.any { jointNumber -&gt; jointNumber == presentationJoint } &amp;&amp; locationTrackSwitchJoints.any { joint -&gt; joint.jointNumber == presentationJoint }</ID>
    <ID>MaxLineLength:SwitchLinkingService.kt$}</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$// The second diversion track's starting point and the related switch is purposefully built to overlap the first switch.</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(overlappingSwitchJoints[0].jointNumber, overlapLinkedStraightAlignment.segments[3].startJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(overlappingSwitchJoints[1].jointNumber, overlapLinkedStraightAlignment.segments[4].startJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(testLocation.straightTrackAlignment.segments[1].endJointNumber, overlapLinkedStraightAlignment.segments[1].endJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(testLocation.straightTrackAlignment.segments[1].startJointNumber, overlapLinkedStraightAlignment.segments[1].startJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(testLocation.straightTrackAlignment.segments[2].endJointNumber, overlapLinkedStraightAlignment.segments[2].endJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$assertEquals(testLocation.straightTrackAlignment.segments[2].startJointNumber, overlapLinkedStraightAlignment.segments[2].startJointNumber)</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$fun</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$private</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$segment(Point(40.0, 0.0), Point(60.0, 0.0))</ID>
    <ID>MaxLineLength:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$segment(Point(60.0, 0.0), Point(80.0, 0.0))</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertNotNull(joint2.matches.find { it.segmentIndex == 1 &amp;&amp; it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.LINE })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint1.matches.all { it.segmentIndex == 0 &amp;&amp; it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.START })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint1.matches.all { it.segmentIndex == 1 &amp;&amp; it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.START })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint1.matches.any { it.segmentIndex == 2 &amp;&amp; it.locationTrackId == locationTrack2.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.END })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint1.matches.any { it.segmentIndex == 3 &amp;&amp; it.locationTrackId == locationTrack1.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.START })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint1.matches.none { it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.END })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint2.matches.all { it.segmentIndex == 1 &amp;&amp; it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.END })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint2.matches.all { it.segmentIndex == 2 &amp;&amp; it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.END })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint2.matches.any { it.segmentIndex == 1 &amp;&amp; it.locationTrackId == locationTrack2.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.START })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint2.matches.any { it.segmentIndex == 4 &amp;&amp; it.locationTrackId == locationTrack1.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.END })</ID>
    <ID>MaxLineLength:SwitchLinkingTest.kt$SwitchLinkingTest$assertTrue(joint2.matches.none { it.locationTrackId == locationTrack.id &amp;&amp; it.matchType == SuggestedSwitchJointMatchType.START })</ID>
    <ID>MaxLineLength:SwitchStructure.kt$SwitchBaseType.KRV</ID>
    <ID>MaxLineLength:SwitchStructure.kt$SwitchBaseType.YV</ID>
    <ID>MaxLineLength:SwitchStructure.kt$SwitchStructure$if</ID>
    <ID>MaxLineLength:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("Presentation joint number $presentationJointNumber does not exists in joints!")</ID>
    <ID>MaxLineLength:TestGeometryPlanService.kt$TestGeometryPlanService.BuildGeometryPlan$boundingPolygonPointsByConvexHull</ID>
    <ID>MaxLineLength:Toast.kt${ "None of the toasts matched with content [$content]. Toasts that were visible: ${getToasts().map { it.first }}" }</ID>
    <ID>MaxLineLength:ToolBar.kt$E2EMapLayerPanel$clickChild(By.xpath("//label[@class='map-layer-menu__layer-visibility ' and span[text() = '${mapLayer.uiText}']]/label[@class='switch']"))</ID>
    <ID>MaxLineLength:ToolBar.kt$E2EMapLayerPanel$return childElement(By.xpath("//label[@class='map-layer-menu__layer-visibility ' and span[text() = '${mapLayer.uiText}']]//input']")).isSelected</ID>
    <ID>MaxLineLength:ToolPanelDialog.kt$E2ELayoutSwitchEditDialog$By.xpath("following-sibling::div[contains(@class, 'dialog')]//button[contains(@class, 'button--primary')]")</ID>
    <ID>MaxLineLength:ToolPanelDialog.kt$E2ELocationTrackEditDialog$By.xpath("following-sibling::div[contains(@class, 'dialog')]//button[contains(@class, 'button--primary')]")</ID>
    <ID>MaxLineLength:ToolPanelDialog.kt$E2ETrackNumberEditDialog$By.xpath("following-sibling::div[contains(@class, 'dialog')]//button[contains(@class, 'button--primary')]")</ID>
    <ID>MaxLineLength:TrackLayout.kt$LocationTrack$"LocationTrack cannot topologically connect to the same switch at both ends: " + "trackId=$id " + "switchId=${topologyStartSwitch?.switchId} " + "startJoint=${topologyStartSwitch?.jointNumber} " + "endJoint=${topologyEndSwitch?.jointNumber}"</ID>
    <ID>MaxLineLength:TrackLayout.kt$LocationTrack$"LocationTrack descriptionBase length invalid not in range 4-256: " + "id=$id " + "length=${descriptionBase.length} " + "allowed=$locationTrackDescriptionLength"</ID>
    <ID>MaxLineLength:TrackLayout.kt$TrackLayoutKmLengthDetails$"Km post is wrong way around (endM is smaller than startM), trackNumber=$trackNumber kmNumber=$kmNumber startM=$startM endM=$endM"</ID>
    <ID>MaxLineLength:TrackLayoutDomainTestData.kt$if (alignment.segments.count() &lt; segmentIndex + 3) throw IllegalArgumentException("Alignment must contain at least ${segmentIndex + 3} segments")</ID>
    <ID>MaxLineLength:TrackLayoutTest.kt$TrackLayoutTest$assertApproximatelyEquals(original.points[2].copy(m = original.points[2].m + startSliceStart), startSlice.points[startSlice.points.lastIndex])</ID>
    <ID>MaxLineLength:TransactionConfiguration.kt$TransactionConfiguration.&lt;no name provided&gt;.&lt;no name provided&gt;$*</ID>
    <ID>MaxLineLength:TransactionConfigurationIT.kt$TransactionConfigurationIT$class</ID>
    <ID>MaxLineLength:TransformationTest.kt$TransformationTest$Transformation.possiblyTriangulableTransform(LAYOUT_SRID, RATKO_SRID, DummyTriangulationNetwork, DummyTriangulationNetwork)</ID>
    <ID>MaxLineLength:TransformationTest.kt$TransformationTest$val transformedHeight = transformHeightValue(originalHeight, pointToTransform, listOfHeightTriangles, VerticalCoordinateSystem.N60)</ID>
    <ID>MaxLineLength:VerticalGeometryListPage.kt$E2EDataProductLayoutVerticalGeometryList$class</ID>
    <ID>MaxLineLength:VerticalGeometryListPage.kt$E2EDataProductLayoutVerticalGeometryList$override fun getRowContent(row: WebElement)</ID>
    <ID>MaxLineLength:VerticalGeometryListPage.kt$E2EDataProductPlanVerticalGeometryList$class</ID>
    <ID>MaxLineLength:VerticalGeometryListPage.kt$E2EDataProductPlanVerticalGeometryList$override fun getRowContent(row: WebElement)</ID>
    <ID>MaxLineLength:VerticalGeometryListPage.kt$E2EDataProductVerticalGeometryListItem$pviPointLocationE = getColumnContent("data-products.vertical-geometry.table.pvi-point-location-e", columns, headers)</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.CREATION_DATE)) { it.creationTime?.let(::toCsvDate) }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.CRS)) { it.coordinateSystemSrid ?: it.coordinateSystemName }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_E_END)) { it.end.location?.roundedX }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_E_POINT)) { it.point.location?.roundedX }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_E_START)) { it.start.location?.roundedX }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_N_END)) { it.end.location?.roundedY }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_N_POINT)) { it.point.location?.roundedY }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.LOCATION_N_START)) { it.start.location?.roundedY }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.REMARKS)) { if (it.overlapsAnother) VERTICAL_SECTIONS_OVERLAP else "" }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.VERTICAL_COORDINATE_SYSTEM)) { it.verticalCoordinateSystem }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$CsvEntry&lt;VerticalGeometryListing&gt;(translateVerticalGeometryListingHeader(VerticalGeometryListingHeader.PLAN_NAME)) { it.fileName }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$fun</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$linearSegmentLength = previousLinearSegment?.let { previousLinearSegment.end.x - previousLinearSegment.start.x }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$linearSegments.find { it.start.x &gt; currentSegment.start.x &amp;&amp; (nextCurvedSegment == null || it.start.x &lt; nextCurvedSegment.start.x) }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$linearSegments.findLast { it.start.x &lt; currentSegment.start.x &amp;&amp; (previousCurvedSegment == null || it.start.x &gt; previousCurvedSegment.start.x) }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$partitioned.first.map { it as CurvedProfileSegment } to partitioned.second.map { it as LinearProfileSegment }</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$val (curvedProfileSegments, linearProfileSegments) = separateCurvedAndLinearProfileSegments(geometryAlignment.profile?.segments ?: emptyList())</ID>
    <ID>MaxLineLength:VerticalGeometryListing.kt$val segmentRange = Range(geometryAlignment.stationValueNormalized(segment.start.x)..geometryAlignment.stationValueNormalized(segment.end.x))</ID>
    <ID>MaxLineLength:VerticalGeometryListingTest.kt$VerticalGeometryListingTest$val next = nextLinearSection(segment, curved as List&lt;CurvedProfileSegment&gt;, linear as List&lt;LinearProfileSegment&gt;)</ID>
    <ID>MaxLineLength:VerticalGeometryListingTest.kt$VerticalGeometryListingTest$val previous = previousLinearSection(segment, curved as List&lt;CurvedProfileSegment&gt;, linear as List&lt;LinearProfileSegment&gt;)</ID>
    <ID>MaxLineLength:WktGeometries.kt$require(typeString == actualTypeString.trim()) { "WKT type does not match: expected=$typeString actual=$actualTypeString" }</ID>
    <ID>MayBeConst:PVClient.kt$val reloginOffsetSeconds: Long = 60</ID>
    <ID>MayBeConst:PVClientConfiguration.kt$val maxFileSize: Int = 100 * 1024 * 1024</ID>
    <ID>MemberNameEqualsClassName:GeocodingCacheService.kt$GeocodingCacheService$@Autowired @Lazy lateinit var geocodingCacheService: GeocodingCacheService</ID>
    <ID>NestedBlockDepth:GeometryProfile.kt$private fun createProfileSegments( start: Point, startValid: Boolean, intersection: VerticalIntersection, nextIntersection: VerticalIntersection?, ): ProfileCalculationResult</ID>
    <ID>NestedBlockDepth:PublicationUtils.kt$fun getPointMovedRemarkOrNull(translation: Translation, oldPoint: Point?, newPoint: Point?)</ID>
    <ID>NestedBlockDepth:RatkoClient.kt$RatkoClient$fun &lt;T : RatkoAsset&gt; updateAssetState(assetOid: RatkoOid&lt;T&gt;, state: RatkoAssetState)</ID>
    <ID>NewLineAtEndOfFile:JsonFormattingTest.kt$fi.fta.geoviite.infra.jsonFormatting.JsonFormattingTest.kt</ID>
    <ID>NewLineAtEndOfFile:KeyUtilsTest.kt$fi.fta.geoviite.infra.cloudfront.KeyUtilsTest.kt</ID>
    <ID>NewLineAtEndOfFile:SecurityProviderInitialization.kt$fi.fta.geoviite.infra.cloudfront.SecurityProviderInitialization.kt</ID>
    <ID>ProtectedMemberInFinalClass:LayoutAlignmentService.kt$LayoutAlignmentService$protected val logger: Logger = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>ReturnCount:GeometryProfile.kt$private fun createProfileSegments( start: Point, startValid: Boolean, intersection: VerticalIntersection, nextIntersection: VerticalIntersection?, ): ProfileCalculationResult</ID>
    <ID>ReturnCount:GeometryService.kt$GeometryService$fun getLocationTrackGeometryLinkingSummary( locationTrackId: IntId&lt;LocationTrack&gt;, publishType: PublishType, ): List&lt;PlanLinkingSummaryItem&gt;?</ID>
    <ID>ReturnCount:GeometryService.kt$GeometryService$fun getLocationTrackHeights( locationTrackId: IntId&lt;LocationTrack&gt;, publishType: PublishType, startDistance: Double, endDistance: Double, tickLength: Int, ): List&lt;KmHeights&gt;?</ID>
    <ID>ReturnCount:GeometryService.kt$GeometryService$fun getPlanAlignmentHeights( planId: IntId&lt;GeometryPlan&gt;, planAlignmentId: IntId&lt;GeometryAlignment&gt;, startDistance: Double, endDistance: Double, tickLength: Int, ): List&lt;KmHeights&gt;?</ID>
    <ID>ReturnCount:GeometryService.kt$GeometryService$fun getPlanAlignmentStartAndEnd( planId: IntId&lt;GeometryPlan&gt;, planAlignmentId: IntId&lt;GeometryAlignment&gt;, ): AlignmentStartAndEnd?</ID>
    <ID>ReturnCount:GeometryService.kt$GeometryService$private fun collectTrackMeterHeights( startDistance: Double, endDistance: Double, geocodingContext: GeocodingContext, alignment: IAlignment, tickLength: Int, alignmentBoundaryAddresses: List&lt;PlanBoundaryPoint&gt; = listOf(), getHeightAt: (point: LayoutPoint, segmentIndex: Int?) -&gt; Double?, ): List&lt;KmHeights&gt;?</ID>
    <ID>ReturnCount:Line.kt$fun closestPointProportionOnLine(start: IPoint, end: IPoint, target: IPoint): Double</ID>
    <ID>ReturnCount:SwitchLinkingService.kt$SwitchLinkingService$fun tryToSnapOverlappingSwitchSegmentToNearbySegment( layoutAlignment: LayoutAlignment, switchLinkingSegment: SwitchLinkingSegment ): SwitchLinkingSegment</ID>
    <ID>ReturnCount:SwitchLinkingService.kt$SwitchLinkingService$private fun findExistingSwitchEdgeSegmentWithSwitchFreeAdjacentSegment( existingSwitchId: IntId&lt;TrackLayoutSwitch&gt;, layoutSegments: List&lt;LayoutSegment&gt;, searchIndexRange: IntProgression, ): IndexedValue&lt;LayoutSegment&gt;?</ID>
    <ID>SafeCast:LayoutKmPostController.kt$LayoutKmPostController$if (trackNumberId is IntId) trackNumberId else null</ID>
    <ID>SafeCast:SwitchLinkingService.kt$if (id is IntId) id else null</ID>
    <ID>SpreadOperator:BoundingBox.kt$BoundingBox$(*pointArray(polygonPoints))</ID>
    <ID>SpreadOperator:ElementListing.kt$( trackNumberCsvEntry(trackNumbers), *commonElementListingCsvEntries )</ID>
    <ID>SpreadOperator:ElementListing.kt$( trackNumberCsvEntry(trackNumbers), CsvEntry(translateElementListingHeader(ElementListingHeader.LOCATION_TRACK)) { it.locationTrackName }, *commonElementListingCsvEntries )</ID>
    <ID>SpreadOperator:InfraApplication.kt$(*args)</ID>
    <ID>SpreadOperator:LocalizationService.kt$LocalizationParams$(*params)</ID>
    <ID>SwallowedException:BoundingPolygon.kt$e: Exception</ID>
    <ID>SwallowedException:CommonTestData.kt$ex: java.util.NoSuchElementException</ID>
    <ID>SwallowedException:GeometryValidation.kt$e: Exception</ID>
    <ID>SwallowedException:InfraModelConversion.kt$ex: InputValidationException</ID>
    <ID>SwallowedException:RequestFilter.kt$RequestFilter$ex: TokenExpiredException</ID>
    <ID>SwallowedException:SwitchStructure.kt$e: Exception</ID>
    <ID>SwallowedException:SwitchStructure.kt$e: InvalidJointsException</ID>
    <ID>SwallowedException:TrackLayoutPage.kt$E2ETrackLayoutPage$ex: TimeoutException</ID>
    <ID>SwallowedException:WebElementExternal.kt$e: NoSuchElementException</ID>
    <ID>SwallowedException:WebElementExternal.kt$e: TimeoutException</ID>
    <ID>SwallowedException:WebElementExternal.kt$e: WebDriverException</ID>
    <ID>ThrowsCount:CsvFile.kt$CsvFile$fun &lt;S&gt; parseLinesStreaming(handler: (CsvLine&lt;T&gt;) -&gt; S?): Sequence&lt;S&gt;</ID>
    <ID>ThrowsCount:PublicationService.kt$PublicationService$private fun enrichDuplicateNameExceptionOrRethrow(exception: DataIntegrityViolationException): Nothing</ID>
    <ID>ThrowsCount:RequestFilter.kt$RequestFilter$private fun validateAccessToken(jwt: DecodedJWT)</ID>
    <ID>ThrowsCount:RequestFilter.kt$RequestFilter$private fun validateDataToken(jwt: DecodedJWT)</ID>
    <ID>TooGenericExceptionCaught:BoundingPolygon.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CoordinateTransformationService.kt$Transformation$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CsvMigration.kt$CsvMigration$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GeometryValidation.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InfraModelApi.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InfraModelConversion.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:PVIntegrationService.kt$PVIntegrationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlanLayoutCache.kt$PlanLayoutCache$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PublicationService.kt$PublicationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RatkoService.kt$RatkoService$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RequestFilter.kt$RequestFilter$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RequestFilter.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:StringParsing.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SwitchStructure.kt$e: Exception</ID>
    <ID>TooGenericExceptionThrown:CommonTestData.kt$throw RuntimeException("Could not match switch element (${switchElement.start}, ${switchElement.end})")</ID>
    <ID>TooGenericExceptionThrown:NoTransactionTemplate.kt$NoTransactionTemplate$throw Exception("No transaction template in nodb tests")</ID>
    <ID>TooGenericExceptionThrown:PublicationService.kt$PublicationService$throw Exception("unexpected null from publishChangesTransaction")</ID>
    <ID>TooGenericExceptionThrown:SuggestedSwitchTest.kt$SuggestedSwitchTest$throw Exception("Switch structure does not contain joint ${jointNumber.intValue}")</ID>
    <ID>TooGenericExceptionThrown:TransactionConfigurationIT.kt$TransactionConfigurationIT$throw Exception("Test")</ID>
    <ID>TooManyFunctions:Angle.kt$fi.fta.geoviite.infra.math.Angle.kt</ID>
    <ID>TooManyFunctions:CalculatedChangesService.kt$fi.fta.geoviite.infra.integration.CalculatedChangesService.kt</ID>
    <ID>TooManyFunctions:ChangeTimeController.kt$ChangeTimeController</ID>
    <ID>TooManyFunctions:Clothoid.kt$fi.fta.geoviite.infra.math.Clothoid.kt</ID>
    <ID>TooManyFunctions:CsvFile.kt$CsvFile$CsvLine&lt;T : Enum&lt;T&gt;&gt;</ID>
    <ID>TooManyFunctions:DomainId.kt$fi.fta.geoviite.infra.common.DomainId.kt</ID>
    <ID>TooManyFunctions:Draft.kt$fi.fta.geoviite.infra.tracklayout.Draft.kt</ID>
    <ID>TooManyFunctions:DraftableObjectDao.kt$DraftableDaoBase&lt;T : Draftable&lt;T&gt;&gt; : DaoBaseIDraftableObjectDao</ID>
    <ID>TooManyFunctions:DraftableObjectDao.kt$IDraftableObjectReader&lt;T : Draftable&lt;T&gt;&gt;</ID>
    <ID>TooManyFunctions:DraftableObjectService.kt$DraftableObjectService&lt;ObjectType : Draftable&lt;ObjectType&gt;, DaoType : IDraftableObjectDao&lt;ObjectType&gt;&gt;</ID>
    <ID>TooManyFunctions:ElementListing.kt$fi.fta.geoviite.infra.geometry.ElementListing.kt</ID>
    <ID>TooManyFunctions:GeoToolsGeometries.kt$fi.fta.geoviite.infra.geography.GeoToolsGeometries.kt</ID>
    <ID>TooManyFunctions:Geocoding.kt$GeocodingContext</ID>
    <ID>TooManyFunctions:Geocoding.kt$fi.fta.geoviite.infra.geocoding.Geocoding.kt</ID>
    <ID>TooManyFunctions:GeocodingService.kt$GeocodingService</ID>
    <ID>TooManyFunctions:GeometryController.kt$GeometryController</ID>
    <ID>TooManyFunctions:GeometryDao.kt$GeometryDao : DaoBase</ID>
    <ID>TooManyFunctions:GeometryService.kt$GeometryService</ID>
    <ID>TooManyFunctions:GeometryValidation.kt$fi.fta.geoviite.infra.geometry.GeometryValidation.kt</ID>
    <ID>TooManyFunctions:InfraModelController.kt$InfraModelController</ID>
    <ID>TooManyFunctions:InfraModelConversion.kt$fi.fta.geoviite.infra.inframodel.InfraModelConversion.kt</ID>
    <ID>TooManyFunctions:InfraModelParsing.kt$fi.fta.geoviite.infra.inframodel.InfraModelParsing.kt</ID>
    <ID>TooManyFunctions:InfraModelService.kt$InfraModelService</ID>
    <ID>TooManyFunctions:KmNumber.kt$TrackMeter : ITrackMeter</ID>
    <ID>TooManyFunctions:LayoutAlignmentDao.kt$LayoutAlignmentDao : DaoBase</ID>
    <ID>TooManyFunctions:LayoutKmPostController.kt$LayoutKmPostController</ID>
    <ID>TooManyFunctions:LayoutSwitchDao.kt$LayoutSwitchDao : DraftableDaoBase</ID>
    <ID>TooManyFunctions:LayoutSwitchService.kt$LayoutSwitchService : DraftableObjectService</ID>
    <ID>TooManyFunctions:LayoutTrackNumberController.kt$LayoutTrackNumberController</ID>
    <ID>TooManyFunctions:LayoutTrackNumberService.kt$LayoutTrackNumberService : DraftableObjectService</ID>
    <ID>TooManyFunctions:Line.kt$fi.fta.geoviite.infra.math.Line.kt</ID>
    <ID>TooManyFunctions:LinkingController.kt$LinkingController</ID>
    <ID>TooManyFunctions:LinkingService.kt$LinkingService</ID>
    <ID>TooManyFunctions:LinkingTransformation.kt$fi.fta.geoviite.infra.linking.LinkingTransformation.kt</ID>
    <ID>TooManyFunctions:LocationTrackController.kt$LocationTrackController</ID>
    <ID>TooManyFunctions:LocationTrackDao.kt$LocationTrackDao : DraftableDaoBase</ID>
    <ID>TooManyFunctions:LocationTrackService.kt$LocationTrackService : DraftableObjectService</ID>
    <ID>TooManyFunctions:LoggerExternal.kt$fi.fta.geoviite.infra.logging.LoggerExternal.kt</ID>
    <ID>TooManyFunctions:MapAlignmentService.kt$MapAlignmentService</ID>
    <ID>TooManyFunctions:Math.kt$fi.fta.geoviite.infra.math.Math.kt</ID>
    <ID>TooManyFunctions:PVClient.kt$PVClient</ID>
    <ID>TooManyFunctions:PVDao.kt$PVDao : DaoBase</ID>
    <ID>TooManyFunctions:PVIntegrationService.kt$PVIntegrationService</ID>
    <ID>TooManyFunctions:PVSearchJson.kt$fi.fta.geoviite.infra.projektivelho.PVSearchJson.kt</ID>
    <ID>TooManyFunctions:PlanLayoutTransformation.kt$fi.fta.geoviite.infra.tracklayout.PlanLayoutTransformation.kt</ID>
    <ID>TooManyFunctions:Point.kt$IPoint</ID>
    <ID>TooManyFunctions:PublicationController.kt$PublicationController</ID>
    <ID>TooManyFunctions:PublicationDao.kt$PublicationDao : DaoBase</ID>
    <ID>TooManyFunctions:PublicationService.kt$PublicationService</ID>
    <ID>TooManyFunctions:PublicationUtils.kt$fi.fta.geoviite.infra.publication.PublicationUtils.kt</ID>
    <ID>TooManyFunctions:PublicationValidation.kt$fi.fta.geoviite.infra.publication.PublicationValidation.kt</ID>
    <ID>TooManyFunctions:RatkoClient.kt$RatkoClient</ID>
    <ID>TooManyFunctions:RatkoConversion.kt$fi.fta.geoviite.infra.ratko.model.RatkoConversion.kt</ID>
    <ID>TooManyFunctions:RatkoLocationTrackService.kt$RatkoLocationTrackService</ID>
    <ID>TooManyFunctions:RatkoPushDao.kt$RatkoPushDao : DaoBase</ID>
    <ID>TooManyFunctions:ReferenceLineService.kt$ReferenceLineService : DraftableObjectService</ID>
    <ID>TooManyFunctions:ResultSetExternal.kt$fi.fta.geoviite.infra.util.ResultSetExternal.kt</ID>
    <ID>TooManyFunctions:StringParsing.kt$fi.fta.geoviite.infra.inframodel.StringParsing.kt</ID>
    <ID>TooManyFunctions:StringUtils.kt$fi.fta.geoviite.infra.util.StringUtils.kt</ID>
    <ID>TooManyFunctions:SwitchLinkingService.kt$SwitchLinkingService</ID>
    <ID>TooManyFunctions:SwitchLinkingService.kt$fi.fta.geoviite.infra.linking.SwitchLinkingService.kt</ID>
    <ID>TooManyFunctions:SwitchStructureDao.kt$SwitchStructureDao : DaoBase</ID>
    <ID>TooManyFunctions:VerticalGeometryListing.kt$fi.fta.geoviite.infra.geometry.VerticalGeometryListing.kt</ID>
    <ID>TooManyFunctions:WktGeometries.kt$fi.fta.geoviite.infra.geography.WktGeometries.kt</ID>
    <ID>TopLevelPropertyNaming:FileName.kt$/** * Bytes of character in canonical decomposition form differ from the default form * (precomposed). We encountered these in some IM files, probably produced by * some 3D design software. * * https://www.ibm.com/docs/en/cobol-zos/6.3?topic=functions-ulength */ const val umlautsCanonicalDecomposition = "aäöåÄÖÅ"</ID>
    <ID>TopLevelPropertyNaming:SanitizedString.kt$const val freeTextCharacters = "A-ZÄÖÅa-zäöå0-9 _\\\\\\-–+().,'/*&lt;&gt;:;!?&amp;"</ID>
    <ID>TopLevelPropertyNaming:SanitizedString.kt$const val freeTextWithNewLineCharacters = freeTextCharacters + newLineCharacter</ID>
    <ID>TopLevelPropertyNaming:SanitizedString.kt$const val newLineCharacter = "\n"</ID>
    <ID>UnusedParameter:ApiErrorHandler.kt$ApiErrorHandler$request: WebRequest</ID>
    <ID>UnusedParameter:ErrorTestController.kt$ErrorTestController$@PathVariable("variable") value: ErrorTestParam</ID>
    <ID>UnusedParameter:ErrorTestController.kt$ErrorTestController$@RequestBody body: ErrorTestBody</ID>
    <ID>UnusedParameter:ErrorTestController.kt$ErrorTestController$@RequestParam("param") value: ErrorTestParam</ID>
    <ID>UnusedParameter:ProjektiVelhoPage.kt$E2EProjektiVelhoPage$by: (item: E2EProjektiVelhoListItem) -&gt; Boolean</ID>
    <ID>UnusedParameter:PublicationService.kt$PublicationService$getGeocodingContext: (IntId&lt;TrackLayoutTrackNumber&gt;, Instant) -&gt; GeocodingContext?</ID>
    <ID>UnusedParameter:PublicationService.kt$PublicationService$newTimestamp: Instant</ID>
    <ID>UnusedParameter:PublicationService.kt$PublicationService$oldTimestamp: Instant</ID>
    <ID>UnusedParameter:PublicationService.kt$PublicationService$previousPublicationTime: Instant</ID>
    <ID>UnusedPrivateMember:Browser.kt$private fun hasEntryLevel(logEntries: List&lt;LogEntry&gt;, level: Level): Boolean</ID>
    <ID>UnusedPrivateMember:Browser.kt$private fun messageMatches(logEntries: List&lt;LogEntry&gt;, regex: Regex): Boolean</ID>
    <ID>UnusedPrivateMember:DraftableObjectDao.kt$DraftableDaoBase$private fun fetchOfficialRowVersion(id: IntId&lt;T&gt;, table: DbTable): RowVersion&lt;T&gt;?</ID>
    <ID>UnusedPrivateMember:PublicationDao.kt$PublicationDao$private fun parseSwitchChangeReference(str: String): Pair&lt;IntId&lt;TrackLayoutSwitch&gt;, String&gt;</ID>
    <ID>UnusedPrivateMember:PublicationValidationTest.kt$PublicationValidationTest$private fun assertReferenceLineFieldError(hasError: Boolean, alignment: LayoutAlignment, error: String)</ID>
    <ID>UnusedPrivateMember:SecurityProviderInitialization.kt$SecurityProviderInitialization$@PostConstruct private fun init()</ID>
    <ID>UnusedPrivateProperty:PVDocumentService.kt$PVDocumentService$private val pvClient: PVClient by lazy { pvClientParam ?: throw IntegrationNotConfiguredException(Integration.PROJEKTIVELHO) }</ID>
    <ID>UnusedPrivateProperty:Toast.kt$private val logger: Logger = LoggerFactory.getLogger(E2EToast::class.java)</ID>
    <ID>UseCheckOrError:AuthorizationDao.kt$AuthorizationDao$throw IllegalStateException("Can't fetch role without name/group")</ID>
    <ID>UseCheckOrError:AuthorizationDao.kt$AuthorizationDao$throw IllegalStateException("No such role: roleCode=$roleCode")</ID>
    <ID>UseCheckOrError:BoundingBox.kt$throw IllegalStateException("Failed to create bounding box")</ID>
    <ID>UseCheckOrError:CalculatedChangesService.kt$throw IllegalStateException("Topology switch contains invalid joint number: $topologySwitch")</ID>
    <ID>UseCheckOrError:CsvFile.kt$CsvFile$throw IllegalStateException("CSV columns wrong: expected=$expectedColumns actual=${parser.headerNames}")</ID>
    <ID>UseCheckOrError:CsvFile.kt$CsvFile$throw IllegalStateException("No such CSV file found: ${file.absolutePath}")</ID>
    <ID>UseCheckOrError:CsvFile.kt$CsvFile$throw IllegalStateException("Parser lost")</ID>
    <ID>UseCheckOrError:CsvMigration.kt$CsvMigration$throw IllegalStateException("Can't run imports without DB connection")</ID>
    <ID>UseCheckOrError:DBTestBase.kt$DBTestBase$throw IllegalStateException("JDBC not initialized")</ID>
    <ID>UseCheckOrError:DBTestBase.kt$DBTestBase$throw IllegalStateException("Transaction returned nothing")</ID>
    <ID>UseCheckOrError:DaoBase.kt$DaoBase$throw IllegalStateException("Database connection not initialized")</ID>
    <ID>UseCheckOrError:DaoBase.kt$throw IllegalStateException("Found more than one $name with id: $id")</ID>
    <ID>UseCheckOrError:DaoBase.kt$throw IllegalStateException("Found more than one ${S::class.simpleName} with same $idDesc")</ID>
    <ID>UseCheckOrError:DataProductsTestData.kt$throw IllegalStateException("element $t not supported by this test method")</ID>
    <ID>UseCheckOrError:DraftableObjectDao.kt$DraftableDaoBase$throw IllegalStateException("Multiple rows deleted with one ID: $id")</ID>
    <ID>UseCheckOrError:DraftableObjectService.kt$DraftableObjectService$throw IllegalStateException("Object to publish is not a draft $versions $draft")</ID>
    <ID>UseCheckOrError:DraftableObjectService.kt$DraftableObjectService$throw IllegalStateException("Published object is still a draft")</ID>
    <ID>UseCheckOrError:ElementListing.kt$throw IllegalStateException( "Geometry element not found on its parent alignment: alignment=${alignment.id} element=$elementId" )</ID>
    <ID>UseCheckOrError:ElementListing.kt$throw IllegalStateException("Failed to fetch geometry alignment for element: element=$elementId")</ID>
    <ID>UseCheckOrError:ElementListingTest.kt$ElementListingTest$throw IllegalStateException("Alignment must have int-id for element seeking to work")</ID>
    <ID>UseCheckOrError:ElementListingTest.kt$ElementListingTest$throw IllegalStateException("Must have elements to generate the segments for")</ID>
    <ID>UseCheckOrError:Elements.kt$throw IllegalStateException("No child element found: parent=$parent childBy=$childBy timeout=$timeout")</ID>
    <ID>UseCheckOrError:ErrorHandling.kt$throw IllegalStateException("Errors are not meant to be caught! Tried to handle $current")</ID>
    <ID>UseCheckOrError:ErrorTestController.kt$ErrorTestController$throw IllegalStateException("Unhandled error")</ID>
    <ID>UseCheckOrError:ErrorTestController.kt$ErrorTestController$throw java.lang.IllegalStateException("Unhandled error")</ID>
    <ID>UseCheckOrError:Geocoding.kt$GeocodingContext$throw IllegalStateException("Can't resolve reference line addresses")</ID>
    <ID>UseCheckOrError:GeocodingCacheService.kt$GeocodingCacheService$throw IllegalStateException("DB ReferenceLine should have an alignment")</ID>
    <ID>UseCheckOrError:GeocodingDao.kt$GeocodingDao$throw IllegalStateException("Unmatched row-versions: ids=$ids versions=$versions")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new alignment")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new application")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new author")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new plan")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new project")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to get generated ID for new switch")</ID>
    <ID>UseCheckOrError:GeometryDao.kt$GeometryDao$throw IllegalStateException("Failed to insert plan file into DB")</ID>
    <ID>UseCheckOrError:GeometryService.kt$GeometryService$throw IllegalStateException("Coordinate system not found for geometry switch $switchId!")</ID>
    <ID>UseCheckOrError:KkjEtrsTransformation.kt$KkjTm35finTriangle$throw IllegalStateException("Failed to create polygon")</ID>
    <ID>UseCheckOrError:KmNumber.kt$throw IllegalStateException("No meters format defined for scale $decimals")</ID>
    <ID>UseCheckOrError:LayoutAlignmentDao.kt$LayoutAlignmentDao$throw IllegalStateException("Failed to generate ID for new Track Layout Alignment")</ID>
    <ID>UseCheckOrError:LayoutAlignmentDao.kt$LayoutAlignmentDao$throw IllegalStateException("Failed to get new version for Track Layout Alignment")</ID>
    <ID>UseCheckOrError:LayoutKmPostDao.kt$LayoutKmPostDao$throw IllegalStateException("Failed to generate ID for new km-post")</ID>
    <ID>UseCheckOrError:LayoutKmPostDao.kt$LayoutKmPostDao$throw IllegalStateException("Failed to generate ID for new row version of updated km-post")</ID>
    <ID>UseCheckOrError:LayoutSwitchDao.kt$LayoutSwitchDao$throw IllegalStateException("Failed to generate ID for new switch")</ID>
    <ID>UseCheckOrError:LayoutSwitchDao.kt$LayoutSwitchDao$throw IllegalStateException("Failed to get new version for Track Layout Switch")</ID>
    <ID>UseCheckOrError:LayoutSwitchDao.kt$LayoutSwitchDao$throw IllegalStateException("Unexpected null from exists-query")</ID>
    <ID>UseCheckOrError:LayoutTrackNumberDao.kt$LayoutTrackNumberDao$throw IllegalStateException("Failed to generate ID for new TrackNumber")</ID>
    <ID>UseCheckOrError:LayoutTrackNumberDao.kt$LayoutTrackNumberDao$throw IllegalStateException("Failed to get new version for Track Layout TrackNumber")</ID>
    <ID>UseCheckOrError:LayoutTrackNumberDao.kt$LayoutTrackNumberDao$throw IllegalStateException("Unexpected null from exists-query")</ID>
    <ID>UseCheckOrError:LayoutTrackNumberService.kt$LayoutTrackNumberService$throw IllegalStateException("Found Track Number without Reference Line $id")</ID>
    <ID>UseCheckOrError:LocationTrackDao.kt$LocationTrackDao$throw IllegalStateException("Failed to generate ID for new Location Track")</ID>
    <ID>UseCheckOrError:LocationTrackDao.kt$LocationTrackDao$throw IllegalStateException("Failed to get new version for Location Track")</ID>
    <ID>UseCheckOrError:LocationTrackDao.kt$LocationTrackDao$throw IllegalStateException("LocationTrack in DB needs an alignment")</ID>
    <ID>UseCheckOrError:LocationTrackDao.kt$LocationTrackDao$throw IllegalStateException("Unexpected null from exists-query")</ID>
    <ID>UseCheckOrError:LocationTrackServiceIT.kt$LocationTrackServiceIT$throw IllegalStateException("Exists-check failed")</ID>
    <ID>UseCheckOrError:NamedParameterJdbcTemplateExternal.kt$throw IllegalStateException("Cannot have more than one ${T::class.simpleName} with same ID")</ID>
    <ID>UseCheckOrError:PVClient.kt$PVClient$throw IllegalStateException("ProjektiVelho login failed")</ID>
    <ID>UseCheckOrError:PVClient.kt$PVClient$throw IllegalStateException("ProjektiVelho login token can't be null after login")</ID>
    <ID>UseCheckOrError:PublicationDao.kt$PublicationDao$throw IllegalStateException("Failed to generate ID for new publish row")</ID>
    <ID>UseCheckOrError:PublicationService.kt$PublicationService$throw IllegalStateException("No OID received from RATKO")</ID>
    <ID>UseCheckOrError:RatkoLocationTrackService.kt$RatkoLocationTrackService$throw IllegalStateException("No address point found: seek=$seek rounding=$rounding")</ID>
    <ID>UseCheckOrError:RatkoPushDao.kt$RatkoPushDao$throw IllegalStateException("Encountered Ratko push error without asset! id: $errorId")</ID>
    <ID>UseCheckOrError:ReferenceLineDao.kt$ReferenceLineDao$throw IllegalStateException("Failed to generate ID for new Location Track")</ID>
    <ID>UseCheckOrError:ReferenceLineDao.kt$ReferenceLineDao$throw IllegalStateException("Failed to get new version for Reference Line")</ID>
    <ID>UseCheckOrError:ReferenceLineDao.kt$ReferenceLineDao$throw IllegalStateException("ReferenceLine in DB needs an alignment")</ID>
    <ID>UseCheckOrError:ReferenceLineService.kt$ReferenceLineService$throw IllegalStateException("Track number should have a reference line")</ID>
    <ID>UseCheckOrError:ReferenceLineServiceIT.kt$ReferenceLineServiceIT$throw IllegalStateException("Exists-check failed")</ID>
    <ID>UseCheckOrError:ReferenceLineServiceIT.kt$ReferenceLineServiceIT$throw IllegalStateException("Reference line was not automatically created")</ID>
    <ID>UseCheckOrError:RequestFilter.kt$RequestFilter$throw IllegalStateException("Configuration error: No ELB JWT key url defined")</ID>
    <ID>UseCheckOrError:RequestFilter.kt$RequestFilter$throw IllegalStateException("Invalid configuration: set property geoviite.jwt.validation.url")</ID>
    <ID>UseCheckOrError:ResultSetExternal.kt$throw IllegalStateException("$name can't be null")</ID>
    <ID>UseCheckOrError:ResultSetExternal.kt$throw IllegalStateException("Enum value does not exist in result set")</ID>
    <ID>UseCheckOrError:ResultSetExternal.kt$throw IllegalStateException("StringCode was null")</ID>
    <ID>UseCheckOrError:SpringContextUtility.kt$SpringContextUtility.Companion$throw IllegalStateException("Application context not initialized")</ID>
    <ID>UseCheckOrError:SpringContextUtility.kt$SpringContextUtility.Companion$throw IllegalStateException("No such property: $key")</ID>
    <ID>UseCheckOrError:SuggestedSwitchTest.kt$SuggestedSwitchTest$throw IllegalStateException("Invalid switch structure")</ID>
    <ID>UseCheckOrError:SwitchLibraryDataMigration.kt$V10_03_06__SwitchLibraryDataMigration$throw IllegalStateException("Can't run imports without DB connection")</ID>
    <ID>UseCheckOrError:SwitchLinkingService.kt$throw IllegalStateException("Cannot find farthest joint!")</ID>
    <ID>UseCheckOrError:SwitchLinkingService.kt$throw IllegalStateException("Switch structure ${switchStructure.type} does not contain shared switch joint and that is weird!")</ID>
    <ID>UseCheckOrError:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$throw IllegalStateException("Invalid switch structure")</ID>
    <ID>UseCheckOrError:SwitchStructureDao.kt$SwitchStructureDao$throw IllegalStateException("Failed to generate ID for new Location Track")</ID>
    <ID>UseCheckOrError:SwitchStructureDao.kt$SwitchStructureDao$throw IllegalStateException("Failed to generate ID for new switch structure alignment")</ID>
    <ID>UseCheckOrError:Toast.kt$throw IllegalStateException("Could not determine toast type")</ID>
    <ID>UseCheckOrError:TrackLayout.kt$LocationTrack$throw IllegalStateException("LocationTrack has no alignment")</ID>
    <ID>UseCheckOrError:TrackLayout.kt$ReferenceLine$throw IllegalStateException("ReferenceLine has no an alignment")</ID>
    <ID>UseCheckOrError:TrackLayoutDomainTestData.kt$throw IllegalStateException("No such joint in structure")</ID>
    <ID>UseCheckOrError:TransactionConfigurationIT.kt$TransactionConfigurationIT$throw IllegalStateException("Test value insert failed")</ID>
    <ID>UseCheckOrError:TransactionConfigurationIT.kt$TransactionConfigurationIT$throw IllegalStateException("Test")</ID>
    <ID>UseCheckOrError:UserData.kt$throw IllegalStateException("No user in context")</ID>
    <ID>UseRequire:BoundingBox.kt$throw IllegalArgumentException("Invalid bounding box (expected 4 numbers): \"$value\"")</ID>
    <ID>UseRequire:Circle.kt$throw IllegalArgumentException("X outside of circe arc")</ID>
    <ID>UseRequire:Clothoid.kt$throw IllegalArgumentException("Can't calculate iteration $k: max=$MAX_ITERATIONS")</ID>
    <ID>UseRequire:DomainId.kt$throw IllegalArgumentException("Invalid indexed id: ${formatForException(source)}")</ID>
    <ID>UseRequire:DomainId.kt$throw IllegalArgumentException("Invalid int id: ${formatForException(source)}")</ID>
    <ID>UseRequire:DomainId.kt$throw IllegalArgumentException("Invalid string id: ${formatForException(source)}")</ID>
    <ID>UseRequire:Draft.kt$throw IllegalArgumentException( "${draft::class} is not a draft and can't be published: id=${draft.id} dataType=${draft.dataType}" )</ID>
    <ID>UseRequire:Draft.kt$throw IllegalArgumentException( "${draft::class} is not stored as draft and can't be published: id=${draft.id} dataType=${draft.dataType}" )</ID>
    <ID>UseRequire:GeometryCant.kt$GeometryCant$throw IllegalArgumentException("Cant should have a non-blank name")</ID>
    <ID>UseRequire:GeometryElement.kt$BiquadraticParabola$throw IllegalArgumentException("Biquadratic parabola cannot be defined without a start- or end-radius.")</ID>
    <ID>UseRequire:GeometryElement.kt$BiquadraticParabola$throw IllegalArgumentException("Biquadratic parabola is not supported between curves (only on of start- and end-radius can be given).")</ID>
    <ID>UseRequire:GeometryElement.kt$ElementData$throw IllegalArgumentException( "Element start and end should differ: name=$name oid=$oidPart start=$start end=$end" )</ID>
    <ID>UseRequire:GeometryElement.kt$GeometryClothoid$throw IllegalArgumentException("Clothoid cannot be defined without a start- or end-radius.")</ID>
    <ID>UseRequire:LayoutAlignmentDao.kt$LayoutAlignmentDao$throw IllegalArgumentException("Cannot update an alignment that isn't in DB already")</ID>
    <ID>UseRequire:LayoutKmPostDao.kt$LayoutKmPostDao$throw IllegalArgumentException("KM post not linked to TrackNumber: kmPost=$newItem")</ID>
    <ID>UseRequire:LayoutKmPostDao.kt$LayoutKmPostDao$throw IllegalArgumentException("KM post not linked to TrackNumber: kmPost=$updatedItem")</ID>
    <ID>UseRequire:Line.kt$throw IllegalArgumentException( "Cannot calculate line slope without X delta: pointA=$pointA pointB=$pointB" )</ID>
    <ID>UseRequire:Line.kt$throw IllegalArgumentException("Cannot interpolate along 0-length line")</ID>
    <ID>UseRequire:Math.kt$throw IllegalArgumentException("Can't do factorial for $n (&lt;0)")</ID>
    <ID>UseRequire:Math.kt$throw IllegalArgumentException("Cannot interpolate between $value1 and $value2")</ID>
    <ID>UseRequire:Math.kt$throw IllegalArgumentException("Cannot round $value")</ID>
    <ID>UseRequire:Math.kt$throw IllegalArgumentException("Integer overflow in calculating factorial for $n")</ID>
    <ID>UseRequire:Point.kt$throw IllegalArgumentException("Invalid point (expected 2 numbers): \"$value\"")</ID>
    <ID>UseRequire:Range.kt$Range$throw IllegalArgumentException("Range min cannot be greater than max: min=$min max=$max")</ID>
    <ID>UseRequire:RequestFilter.kt$RequestFilter$throw IllegalArgumentException("Unsupported JWK RSA algorithm: ${jwk.algorithm}")</ID>
    <ID>UseRequire:StringUtils.kt$throw IllegalArgumentException("Invalid string prefix: prefix=$prefix value=${formatForException(value)}")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchAlignment$throw IllegalArgumentException("No elements")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchAlignment$throw IllegalArgumentException("No joint numbers")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("Alignment contains joint number that does not exists in joints!")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("No alignments")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("No joint points")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("Presentation joint number $presentationJointNumber does not exists in joints!")</ID>
    <ID>UseRequire:SwitchStructure.kt$SwitchStructure$throw IllegalArgumentException("Two or more alignments has the same id!")</ID>
    <ID>UseRequire:TrackLayoutDomainTestData.kt$throw IllegalArgumentException("Alignment must contain at least ${segmentIndex + 3} segments")</ID>
    <ID>UseRequire:TrackLayoutDomainTestData.kt$throw IllegalArgumentException("Alignment must contain at least 3 segments")</ID>
    <ID>UseRequire:WktGeometries.kt$throw IllegalArgumentException("2D geometry should contain X/Y values: ${values.size} &lt;&gt; 2")</ID>
    <ID>UtilityClassWithPublicConstructor:CommonUiTestUtil.kt$CommonUiTestUtil</ID>
    <ID>UtilityClassWithPublicConstructor:HelsinkiTestData.kt$HelsinkiTestData</ID>
    <ID>UtilityClassWithPublicConstructor:KeyUtils.kt$KeyUtils</ID>
    <ID>VariableNaming:BasicMapTestUI.kt$BasicMapTestUI$lateinit var EAST_LAYOUT_SWITCH: TrackLayoutSwitch</ID>
    <ID>VariableNaming:BasicMapTestUI.kt$BasicMapTestUI$lateinit var GEOMETRY_PLAN: GeometryPlan</ID>
    <ID>VariableNaming:BasicMapTestUI.kt$BasicMapTestUI$lateinit var TRACK_NUMBER_WEST: TrackLayoutTrackNumber</ID>
    <ID>VariableNaming:BasicMapTestUI.kt$BasicMapTestUI$lateinit var WEST_LT: Pair&lt;LocationTrack, LayoutAlignment&gt;</ID>
    <ID>VariableNaming:BasicMapTestUI.kt$BasicMapTestUI$lateinit var WEST_REFERENCE_LINE: Pair&lt;ReferenceLine, LayoutAlignment&gt;</ID>
    <ID>VariableNaming:Dropdown.kt$E2EDropdown$private val CONTAINER_BY: By = By.className("dropdown__list-container")</ID>
    <ID>VariableNaming:InfraModelTestUI.kt$InfraModelTestUI$val TESTFILE_CLOTHOID_AND_PARABOLA_2_PATH: String = "src/test/resources/inframodel/testfile_clothoid_and_parabola_2.xml"</ID>
    <ID>VariableNaming:InfraModelTestUI.kt$InfraModelTestUI$val TESTFILE_CLOTHOID_AND_PARABOLA_PATH: String = "src/test/resources/inframodel/testfile_clothoid_and_parabola.xml"</ID>
    <ID>VariableNaming:InfraModelTestUI.kt$InfraModelTestUI$val TESTFILE_SIMPLE_PATH: String = "src/test/resources/inframodel/testfile_simple.xml"</ID>
    <ID>VariableNaming:LinkingDaoIT.kt$LinkingDaoIT$val point3_1 = Point(10.0, 12.0)</ID>
    <ID>VariableNaming:LinkingDaoIT.kt$LinkingDaoIT$val point3_2 = Point(10.0, 13.0)</ID>
    <ID>VariableNaming:LocationTrackService.kt$LocationTrackService$private val BUFFER_TRANSLATION = "Puskin"</ID>
    <ID>VariableNaming:SuggestedSwitchTest.kt$SuggestedSwitchTest$private val switchAlignment_1_5_2 = switchStructure.alignments.find { alignment -&gt; alignment.jointNumbers.contains(JointNumber(5)) } ?: throw IllegalStateException("Invalid switch structure")</ID>
    <ID>VariableNaming:SwitchLinkingServiceIT.kt$SwitchLinkingServiceIT$lateinit var switchAlignment_1_5_2: SwitchAlignment</ID>
    <ID>WildcardImport:AddressChangesServiceIT.kt$import fi.fta.geoviite.infra.geocoding.*</ID>
    <ID>WildcardImport:AddressChangesServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:AlignmentGeometry.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:Angle.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:ApiErrorHandlerTest.kt$import org.springframework.http.HttpStatus.*</ID>
    <ID>WildcardImport:AuthorizationController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:AuthorizationDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:BasicMapTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:BasicMapTestUI.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:BoundingBoxTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:CachePreloader.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:CalculatedChangesService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:CalculatedChangesService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:CalculatedChangesServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:CalculatedChangesServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:ChangeContext.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:ChangeTimeController.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:Circle.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:ClientException.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:ClientException.kt$import org.springframework.http.HttpStatus.*</ID>
    <ID>WildcardImport:CommonTestData.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:CommonTestData.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:CommonTestData.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:CoordinateTransformServiceIT.kt$import fi.fta.geoviite.infra.geography.*</ID>
    <ID>WildcardImport:DBTestBase.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:DomainId.kt$import fi.fta.geoviite.infra.common.IdType.*</ID>
    <ID>WildcardImport:DraftIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:DraftableObjectDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:ElementListing.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:ElementListing.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:ElementListing.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:ElementListingFileDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:ElementListingTest.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:ElementListingTest.kt$import fi.fta.geoviite.infra.geometry.TrackGeometryElementType.*</ID>
    <ID>WildcardImport:ElementListingTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:Elements.kt$import org.openqa.selenium.support.ui.ExpectedConditions.*</ID>
    <ID>WildcardImport:ErrorHandling.kt$import com.auth0.jwt.exceptions.*</ID>
    <ID>WildcardImport:ErrorHandling.kt$import org.springframework.http.HttpStatus.*</ID>
    <ID>WildcardImport:ErrorTestController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:FakeRatko.kt$import com.fasterxml.jackson.module.kotlin.*</ID>
    <ID>WildcardImport:FakeRatko.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:FrontPageTestUI.kt$import fi.fta.geoviite.infra.integration.*</ID>
    <ID>WildcardImport:FrontPageTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:Geocoding.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:Geocoding.kt$import fi.fta.geoviite.infra.math.IntersectType.*</ID>
    <ID>WildcardImport:Geocoding.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeocodingCacheService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeocodingController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:GeocodingDao.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeocodingDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:GeocodingDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeocodingDaoIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:GeocodingService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeocodingService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeocodingServiceIT.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:GeocodingTest.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeocodingTest.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:GeocodingTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeometryAssertions.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:GeometryController.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:GeometryController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:GeometryDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryDao.kt$import fi.fta.geoviite.infra.geometry.GeometryElementType.*</ID>
    <ID>WildcardImport:GeometryDao.kt$import fi.fta.geoviite.infra.logging.AccessType.*</ID>
    <ID>WildcardImport:GeometryDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:GeometryDao.kt$import fi.fta.geoviite.infra.util.DbTable.*</ID>
    <ID>WildcardImport:GeometryDomainTestData.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryDomainTestData.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:GeometryElement.kt$import fi.fta.geoviite.infra.geometry.GeometryElementType.*</ID>
    <ID>WildcardImport:GeometryElement.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:GeometryElementListPage.kt$import fi.fta.geoviite.infra.ui.pagemodel.common.*</ID>
    <ID>WildcardImport:GeometryElementListTestUI.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:GeometryElementListTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeometryElementTest.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:GeometryElementTest.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:GeometryPlan.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryProfile.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:GeometryProfile.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:GeometryService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeometryServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:GeometrySwitch.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryValidation.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:GeometryValidation.kt$import fi.fta.geoviite.infra.geometry.ErrorType.*</ID>
    <ID>WildcardImport:GeometryValidation.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:HelsinkiTestData.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:HelsinkiTestData.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:HelsinkiTestData.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:IdTestController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:InfraModel403.kt$import jakarta.xml.bind.annotation.*</ID>
    <ID>WildcardImport:InfraModel404.kt$import jakarta.xml.bind.annotation.*</ID>
    <ID>WildcardImport:InfraModelApi.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:InfraModelApi.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:InfraModelController.kt$import fi.fta.geoviite.infra.projektivelho.*</ID>
    <ID>WildcardImport:InfraModelController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:InfraModelConversion.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:InfraModelConversion.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:InfraModelConversion.kt$import fi.fta.geoviite.infra.geometry.PlanState.*</ID>
    <ID>WildcardImport:InfraModelConversion.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:InfraModelConversion.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:InfraModelElement.kt$import fi.fta.geoviite.infra.ui.pagemodel.common.*</ID>
    <ID>WildcardImport:InfraModelParsingIT.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:InfraModelParsingIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:InfraModelService.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:KRV43_233_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KRV43_270_1_9_514.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KRV54_200_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KV30_270_1_9_514.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KV43_300_1_9_514.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KV54_200_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:KeyUtilsTest.kt$import kotlin.test.*</ID>
    <ID>WildcardImport:KilometerLengthsListPage.kt$import fi.fta.geoviite.infra.ui.pagemodel.common.*</ID>
    <ID>WildcardImport:KilometerLengthsTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:KmNumber.kt$import java.math.RoundingMode.*</ID>
    <ID>WildcardImport:LayoutAlignmentDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutAlignmentDao.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:LayoutAlignmentDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LayoutAlignmentDaoIT.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:LayoutAlignmentDaoIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:LayoutGeometry.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutGeometry.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:LayoutGeometry.kt$import fi.fta.geoviite.infra.math.IntersectType.*</ID>
    <ID>WildcardImport:LayoutKmPostController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:LayoutKmPostDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutKmPostDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LayoutKmPostDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.LayoutState.*</ID>
    <ID>WildcardImport:LayoutKmPostDaoIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:LayoutSwitchController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:LayoutSwitchDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutSwitchDao.kt$import fi.fta.geoviite.infra.logging.AccessType.*</ID>
    <ID>WildcardImport:LayoutSwitchDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LayoutSwitchDaoIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:LayoutSwitchServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutSwitchServiceIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:LayoutTrackNumberController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:LayoutTrackNumberDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutTrackNumberDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LayoutTrackNumberService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LayoutTrackNumberServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LineTest.kt$import fi.fta.geoviite.infra.math.IntersectType.*</ID>
    <ID>WildcardImport:Linking.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:Linking.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:Linking.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingController.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:LinkingDao.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:LinkingDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LinkingDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingDomainTestData.kt$import fi.fta.geoviite.infra.publication.*</ID>
    <ID>WildcardImport:LinkingDomainTestData.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingService.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:LinkingService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingServiceIT.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:LinkingServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingServiceIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:LinkingTest.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LinkingTest.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:LinkingTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingTestUI.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LinkingTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LinkingTransformation.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:LinkingTransformation.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:LocationTrackController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:LocationTrackDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LocationTrackDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:LocationTrackDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.LayoutState.*</ID>
    <ID>WildcardImport:LocationTrackService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:LocationTrackServiceIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:MapAlignmentController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:MapAlignmentService.kt$import fi.fta.geoviite.infra.map.*</ID>
    <ID>WildcardImport:PVApi.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:PVClient.kt$import fi.fta.geoviite.infra.projektivelho.PVDictionaryType.*</ID>
    <ID>WildcardImport:PVClientConfiguration.kt$import org.springframework.http.MediaType.*</ID>
    <ID>WildcardImport:PVClientConfiguration.kt$import org.springframework.http.client.reactive.*</ID>
    <ID>WildcardImport:PVDao.kt$import fi.fta.geoviite.infra.logging.AccessType.*</ID>
    <ID>WildcardImport:PVDao.kt$import fi.fta.geoviite.infra.projektivelho.PVDictionaryType.*</ID>
    <ID>WildcardImport:PVDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:PVDocumentService.kt$import fi.fta.geoviite.infra.inframodel.*</ID>
    <ID>WildcardImport:PVIntegrationService.kt$import fi.fta.geoviite.infra.inframodel.*</ID>
    <ID>WildcardImport:PVIntegrationService.kt$import fi.fta.geoviite.infra.projektivelho.PVDocumentStatus.*</ID>
    <ID>WildcardImport:PVIntegrationService.kt$import fi.fta.geoviite.infra.projektivelho.PVFetchStatus.*</ID>
    <ID>WildcardImport:PVIntegrationServiceIT.kt$import fi.fta.geoviite.infra.projektivelho.*</ID>
    <ID>WildcardImport:PVIntegrationServiceIT.kt$import fi.fta.geoviite.infra.projektivelho.PVDictionaryType.*</ID>
    <ID>WildcardImport:PlanLayoutTransformation.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PlanLayoutTransformation.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:PlanLayoutTransformation.kt$import fi.fta.geoviite.infra.geometry.PlanState.*</ID>
    <ID>WildcardImport:PlanLayoutTransformation.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:PlanLayoutTransformation.kt$import fi.fta.geoviite.infra.tracklayout.LayoutState.*</ID>
    <ID>WildcardImport:Point.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:PointTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:ProjektiVelhoTestUI.kt$import fi.fta.geoviite.infra.projektivelho.*</ID>
    <ID>WildcardImport:Publication.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:Publication.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:PublicationDao.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationDao.kt$import fi.fta.geoviite.infra.integration.*</ID>
    <ID>WildcardImport:PublicationDao.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:PublicationDaoIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationDaoIT.kt$import fi.fta.geoviite.infra.integration.*</ID>
    <ID>WildcardImport:PublicationDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationService.kt$import fi.fta.geoviite.infra.linking.*</ID>
    <ID>WildcardImport:PublicationService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationServiceIT.kt$import fi.fta.geoviite.infra.linking.*</ID>
    <ID>WildcardImport:PublicationServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationServiceIT.kt$import kotlin.test.*</ID>
    <ID>WildcardImport:PublicationUtils.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:PublicationUtils.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationUtils.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:PublicationUtilsTest.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:PublicationValidation.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationValidation.kt$import fi.fta.geoviite.infra.geocoding.*</ID>
    <ID>WildcardImport:PublicationValidation.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationValidationTest.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:PublicationValidationTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:PublicationValidationTest.kt$import fi.fta.geoviite.infra.tracklayout.LayoutState.*</ID>
    <ID>WildcardImport:RR54_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:RR54_2x1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:RatkoAssetService.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoClient.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoClientIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoClientIT.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoClientIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoClientTestData.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoClientTestData.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoCommonModel.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:RatkoConversion.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoConversion.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoLocationTrackService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoLocationTrackService.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoLocationTrackService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoPushDao.kt$import fi.fta.geoviite.infra.integration.*</ID>
    <ID>WildcardImport:RatkoPushDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:RatkoPushDaoIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoRouteNumberService.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoRouteNumberService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoService.kt$import fi.fta.geoviite.infra.integration.*</ID>
    <ID>WildcardImport:RatkoService.kt$import fi.fta.geoviite.infra.linking.*</ID>
    <ID>WildcardImport:RatkoService.kt$import fi.fta.geoviite.infra.publication.*</ID>
    <ID>WildcardImport:RatkoService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:RatkoServiceIT.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:RatkoServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoStatusService.kt$import fi.fta.geoviite.infra.integration.RatkoAssetType.*</ID>
    <ID>WildcardImport:RatkoStatusService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:RatkoUtils.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:ReferenceLineController.kt$import org.springframework.web.bind.annotation.*</ID>
    <ID>WildcardImport:ReferenceLineDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:ReferenceLineServiceIT.kt$import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:RequestFilter.kt$import fi.fta.geoviite.infra.authorization.*</ID>
    <ID>WildcardImport:ResultSetExternal.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:SKV60_1000_474_1_15_5.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SKV60_800_423_1_15_5.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SRR54_2x1_9_4_8.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SRR54_2x1_9_6_0.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SRR60_2x1_9_4_8.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SuggestedSwitchTest.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:SuggestedSwitchTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:SwitchLibraryDataMigration.kt$import fi.fta.geoviite.infra.switchLibrary.data.*</ID>
    <ID>WildcardImport:SwitchLinkingService.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:SwitchLinkingService.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:SwitchLinkingService.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SwitchLinkingService.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:SwitchLinkingServiceIT.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:SwitchLinkingServiceIT.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:SwitchLinkingServiceIT.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:SwitchLinkingTest.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:SwitchStructure.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:SwitchStructureDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:SwitchStructureIT.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:SwitchStructureTest.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TYV54_200_1_4_44.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TYV54_200_1_4_44TPE.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TYV54_225_1_6_46.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TYV54_225_1_6_46TPE.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TestRatkoAsset.kt$import fi.fta.geoviite.infra.ratko.model.*</ID>
    <ID>WildcardImport:TrackLayout.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:TrackLayoutDomainTestData.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:TrackLayoutDomainTestData.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:TrackLayoutDomainTestData.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:TransformationTest.kt$import fi.fta.geoviite.infra.geography.*</ID>
    <ID>WildcardImport:UKV54_1500_228_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:UKV54_800_258_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:UKV60_1000_244_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:UKV60_600_281_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:VerticalGeometryElementListTestUI.kt$import fi.fta.geoviite.infra.geometry.*</ID>
    <ID>WildcardImport:VerticalGeometryElementListTestUI.kt$import fi.fta.geoviite.infra.tracklayout.*</ID>
    <ID>WildcardImport:VerticalGeometryListPage.kt$import fi.fta.geoviite.infra.ui.pagemodel.common.*</ID>
    <ID>WildcardImport:VerticalGeometryListing.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:VerticalGeometryListing.kt$import fi.fta.geoviite.infra.math.*</ID>
    <ID>WildcardImport:VerticalGeometryListingFileDao.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:VerticalGeometryListingTest.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:WebConfiguration.kt$import fi.fta.geoviite.infra.common.*</ID>
    <ID>WildcardImport:WebConfiguration.kt$import fi.fta.geoviite.infra.util.*</ID>
    <ID>WildcardImport:WebElementExternal.kt$import org.openqa.selenium.*</ID>
    <ID>WildcardImport:WebElementExternal.kt$import org.openqa.selenium.support.ui.ExpectedConditions.*</ID>
    <ID>WildcardImport:YRV54_200_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV30_270_1_7.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV30_270_1_9_514.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV43_300_1_7.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV43_300_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV43_300_1_9_514.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV43_530_1_15.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV54_165_1_7.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV54_190_1_7.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV54_200_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV54_900_1_15_5.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_300P_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_300_1_10.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_300_1_9.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_5000_2500_1_26.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_5000_3000_1_28.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_500_1_11_1.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_500_1_14.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_900_1_15_5.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:YV60_900_1_18.kt$import fi.fta.geoviite.infra.switchLibrary.*</ID>
    <ID>WildcardImport:build.gradle.kts$import org.gradle.api.tasks.testing.logging.TestLogEvent.*</ID>
  </CurrentIssues>
</SmellBaseline>
